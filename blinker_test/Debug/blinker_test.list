
blinker_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005104  08005104  00007070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005104  08005104  00006104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800510c  0800510c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800510c  0800510c  0000610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005110  08005110  00006110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005114  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08005184  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005184  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed4f  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020fd  00000000  00000000  00015def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00017ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b03  00000000  00000000  00018d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001865e  00000000  00000000  0001980b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbe5  00000000  00000000  00031e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf94  00000000  00000000  00041a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd9e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004324  00000000  00000000  000dda28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e1d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005074 	.word	0x08005074

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005074 	.word	0x08005074

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int pluse =0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]

	int time=1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
	int colorIndex = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fdd1 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f8d9 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fa4d 	bl	8000a64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 fa21 	bl	8000a10 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ce:	f000 f93d 	bl	800084c <MX_ADC1_Init>
  MX_TIM4_Init();
 80005d2:	f000 f98d 	bl	80008f0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("start blinker_test\r\n");
 80005d6:	485d      	ldr	r0, [pc, #372]	@ (800074c <main+0x1a0>)
 80005d8:	f003 feea 	bl	80043b0 <puts>
  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) //인터럽트 시작
 80005dc:	485c      	ldr	r0, [pc, #368]	@ (8000750 <main+0x1a4>)
 80005de:	f002 fa4f 	bl	8002a80 <HAL_TIM_Base_Start_IT>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <main+0x40>
  	Error_Handler();
 80005e8:	f000 fb66 	bl	8000cb8 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 80005ec:	2100      	movs	r1, #0
 80005ee:	4858      	ldr	r0, [pc, #352]	@ (8000750 <main+0x1a4>)
 80005f0:	f002 fb02 	bl	8002bf8 <HAL_TIM_PWM_Start>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x52>
		Error_Handler();
 80005fa:	f000 fb5d 	bl	8000cb8 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 80005fe:	2104      	movs	r1, #4
 8000600:	4853      	ldr	r0, [pc, #332]	@ (8000750 <main+0x1a4>)
 8000602:	f002 faf9 	bl	8002bf8 <HAL_TIM_PWM_Start>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <main+0x64>
		Error_Handler();
 800060c:	f000 fb54 	bl	8000cb8 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK)
 8000610:	2108      	movs	r1, #8
 8000612:	484f      	ldr	r0, [pc, #316]	@ (8000750 <main+0x1a4>)
 8000614:	f002 faf0 	bl	8002bf8 <HAL_TIM_PWM_Start>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <main+0x76>
		Error_Handler();
 800061e:	f000 fb4b 	bl	8000cb8 <Error_Handler>
  HAL_ADC_Start_IT(&hadc1);
 8000622:	484c      	ldr	r0, [pc, #304]	@ (8000754 <main+0x1a8>)
 8000624:	f000 fe54 	bl	80012d0 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 	  if((HAL_GetTick() - lastDebounceTime) > debounceDelay)
 8000628:	f000 fe02 	bl	8001230 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	4b4a      	ldr	r3, [pc, #296]	@ (8000758 <main+0x1ac>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1ad2      	subs	r2, r2, r3
 8000634:	4b49      	ldr	r3, [pc, #292]	@ (800075c <main+0x1b0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	429a      	cmp	r2, r3
 800063a:	d938      	bls.n	80006ae <main+0x102>
	 	  {
	 		  lastDebounceTime = HAL_GetTick();
 800063c:	f000 fdf8 	bl	8001230 <HAL_GetTick>
 8000640:	4603      	mov	r3, r0
 8000642:	4a45      	ldr	r2, [pc, #276]	@ (8000758 <main+0x1ac>)
 8000644:	6013      	str	r3, [r2, #0]
	 	  	  if(keyno != 0) //키가 눌리지 않으면 0 눌리면 1~4
 8000646:	4b46      	ldr	r3, [pc, #280]	@ (8000760 <main+0x1b4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d02f      	beq.n	80006ae <main+0x102>
	 	  	  {
	 	  		printf("keyno : %d \r\n",keyno);
 800064e:	4b44      	ldr	r3, [pc, #272]	@ (8000760 <main+0x1b4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	4843      	ldr	r0, [pc, #268]	@ (8000764 <main+0x1b8>)
 8000656:	f003 fe43 	bl	80042e0 <iprintf>

	 	  		if((time == 10 && keyno ==1) || (time == 1 && keyno ==2)) // 같은 값을 계속 나오게할 때 펄스 값이 더이상 나오지 않게 continue
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b0a      	cmp	r3, #10
 800065e:	d103      	bne.n	8000668 <main+0xbc>
 8000660:	4b3f      	ldr	r3, [pc, #252]	@ (8000760 <main+0x1b4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d06f      	beq.n	8000748 <main+0x19c>
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d103      	bne.n	8000676 <main+0xca>
 800066e:	4b3c      	ldr	r3, [pc, #240]	@ (8000760 <main+0x1b4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d068      	beq.n	8000748 <main+0x19c>
	 	  			 	  			continue;
	 	  		if((keyno == 1) && (time < 10))
 8000676:	4b3a      	ldr	r3, [pc, #232]	@ (8000760 <main+0x1b4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d106      	bne.n	800068c <main+0xe0>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b09      	cmp	r3, #9
 8000682:	dc03      	bgt.n	800068c <main+0xe0>
	 	  		{
	 	  			time++;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	3301      	adds	r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	e009      	b.n	80006a0 <main+0xf4>
	 	  		}
	 	  		else if((keyno == 2) && (time > 1))
 800068c:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <main+0x1b4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d105      	bne.n	80006a0 <main+0xf4>
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b01      	cmp	r3, #1
 8000698:	dd02      	ble.n	80006a0 <main+0xf4>
	 	  		{
	 	  			time--;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3b01      	subs	r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
	 	  		}
	 	  		keyno = 0;
 80006a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000760 <main+0x1b4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	 	  		printf("%d\r\n",time);
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	482f      	ldr	r0, [pc, #188]	@ (8000768 <main+0x1bc>)
 80006aa:	f003 fe19 	bl	80042e0 <iprintf>
	 	  	  }
	 	  }
	if(time4SecFlag)
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <main+0x1c0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0b8      	beq.n	8000628 <main+0x7c>
	{
		 time4SecFlag = 0;
 80006b6:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <main+0x1c0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
	 	 if(time4SecCnt % time == 0)
 80006bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000770 <main+0x1c4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80006c6:	fb01 f202 	mul.w	r2, r1, r2
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1ab      	bne.n	8000628 <main+0x7c>
	 	 {
	 	 	 	if (colorIndex == 0)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10d      	bne.n	80006f2 <main+0x146>
	 	 	    {
	 	 	 		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwmValue);
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <main+0x1a4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a26      	ldr	r2, [pc, #152]	@ (8000774 <main+0x1c8>)
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
	 	 	 	    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <main+0x1a4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2200      	movs	r2, #0
 80006e6:	639a      	str	r2, [r3, #56]	@ 0x38
	 	 	 	    __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <main+0x1a4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006f0:	e020      	b.n	8000734 <main+0x188>
	 	 	    }
	 	        else if (colorIndex == 1)
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d10d      	bne.n	8000714 <main+0x168>
	 	 	    {
	 	 	 	   __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <main+0x1a4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	@ 0x34
	 	 	 	   __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwmValue);
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <main+0x1a4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <main+0x1c8>)
 8000706:	6812      	ldr	r2, [r2, #0]
 8000708:	639a      	str	r2, [r3, #56]	@ 0x38
	 	 	 	   __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <main+0x1a4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2200      	movs	r2, #0
 8000710:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000712:	e00f      	b.n	8000734 <main+0x188>
	 	 	 	 }
	 	 	 	 else if (colorIndex == 2)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d10c      	bne.n	8000734 <main+0x188>
	 	 	 	{
	 	 	 	   __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <main+0x1a4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2200      	movs	r2, #0
 8000720:	635a      	str	r2, [r3, #52]	@ 0x34
	 	 	 	   __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 0);
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <main+0x1a4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2200      	movs	r2, #0
 8000728:	639a      	str	r2, [r3, #56]	@ 0x38
	 	 	 	   __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwmValue);
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <main+0x1a4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <main+0x1c8>)
 8000730:	6812      	ldr	r2, [r2, #0]
 8000732:	63da      	str	r2, [r3, #60]	@ 0x3c
	 	 	 	  }
	 	 	 	  	colorIndex++;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3301      	adds	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
	 	 	 	  	if (colorIndex > 2) colorIndex = 0;
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	2b02      	cmp	r3, #2
 800073e:	f77f af73 	ble.w	8000628 <main+0x7c>
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	e76f      	b.n	8000628 <main+0x7c>
	 	  			 	  			continue;
 8000748:	bf00      	nop
	 	  if((HAL_GetTick() - lastDebounceTime) > debounceDelay)
 800074a:	e76d      	b.n	8000628 <main+0x7c>
 800074c:	0800508c 	.word	0x0800508c
 8000750:	200000d4 	.word	0x200000d4
 8000754:	2000008c 	.word	0x2000008c
 8000758:	20000174 	.word	0x20000174
 800075c:	20000004 	.word	0x20000004
 8000760:	20000178 	.word	0x20000178
 8000764:	080050a0 	.word	0x080050a0
 8000768:	080050b0 	.word	0x080050b0
 800076c:	20000164 	.word	0x20000164
 8000770:	20000168 	.word	0x20000168
 8000774:	2000017c 	.word	0x2000017c

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	@ 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fef2 	bl	8004570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	@ (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a21      	ldr	r2, [pc, #132]	@ (8000848 <SystemClock_Config+0xd0>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e8:	2310      	movs	r3, #16
 80007ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fc56 	bl	80020b0 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080a:	f000 fa55 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2102      	movs	r1, #2
 800082a:	4618      	mov	r0, r3
 800082c:	f001 feb8 	bl	80025a0 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000836:	f000 fa3f 	bl	8000cb8 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	@ 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_ADC1_Init+0x98>)
 8000860:	4a21      	ldr	r2, [pc, #132]	@ (80008e8 <MX_ADC1_Init+0x9c>)
 8000862:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000864:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_ADC1_Init+0x98>)
 8000866:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800086a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_ADC1_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_ADC1_Init+0x98>)
 8000874:	2201      	movs	r2, #1
 8000876:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_ADC1_Init+0x98>)
 800087a:	2201      	movs	r2, #1
 800087c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_ADC1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_ADC1_Init+0x98>)
 800088e:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <MX_ADC1_Init+0xa0>)
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_ADC1_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_ADC1_Init+0x98>)
 800089a:	2201      	movs	r2, #1
 800089c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_ADC1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_ADC1_Init+0x98>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_ADC1_Init+0x98>)
 80008ae:	f000 fccb 	bl	8001248 <HAL_ADC_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 f9fe 	bl	8000cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008bc:	230a      	movs	r3, #10
 80008be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008c4:	2301      	movs	r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_ADC1_Init+0x98>)
 80008ce:	f000 feef 	bl	80016b0 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d8:	f000 f9ee 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	40012000 	.word	0x40012000
 80008ec:	0f000001 	.word	0x0f000001

080008f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	@ 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000920:	4b39      	ldr	r3, [pc, #228]	@ (8000a08 <MX_TIM4_Init+0x118>)
 8000922:	4a3a      	ldr	r2, [pc, #232]	@ (8000a0c <MX_TIM4_Init+0x11c>)
 8000924:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8000926:	4b38      	ldr	r3, [pc, #224]	@ (8000a08 <MX_TIM4_Init+0x118>)
 8000928:	2253      	movs	r2, #83	@ 0x53
 800092a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b36      	ldr	r3, [pc, #216]	@ (8000a08 <MX_TIM4_Init+0x118>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000932:	4b35      	ldr	r3, [pc, #212]	@ (8000a08 <MX_TIM4_Init+0x118>)
 8000934:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b33      	ldr	r3, [pc, #204]	@ (8000a08 <MX_TIM4_Init+0x118>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b31      	ldr	r3, [pc, #196]	@ (8000a08 <MX_TIM4_Init+0x118>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000946:	4830      	ldr	r0, [pc, #192]	@ (8000a08 <MX_TIM4_Init+0x118>)
 8000948:	f002 f84a 	bl	80029e0 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000952:	f000 f9b1 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000960:	4619      	mov	r1, r3
 8000962:	4829      	ldr	r0, [pc, #164]	@ (8000a08 <MX_TIM4_Init+0x118>)
 8000964:	f002 fbaa 	bl	80030bc <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800096e:	f000 f9a3 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000972:	4825      	ldr	r0, [pc, #148]	@ (8000a08 <MX_TIM4_Init+0x118>)
 8000974:	f002 f8e6 	bl	8002b44 <HAL_TIM_PWM_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800097e:	f000 f99b 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	4619      	mov	r1, r3
 8000990:	481d      	ldr	r0, [pc, #116]	@ (8000a08 <MX_TIM4_Init+0x118>)
 8000992:	f002 ff55 	bl	8003840 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800099c:	f000 f98c 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a0:	2360      	movs	r3, #96	@ 0x60
 80009a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4814      	ldr	r0, [pc, #80]	@ (8000a08 <MX_TIM4_Init+0x118>)
 80009b8:	f002 fabe 	bl	8002f38 <HAL_TIM_PWM_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80009c2:	f000 f979 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2204      	movs	r2, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <MX_TIM4_Init+0x118>)
 80009ce:	f002 fab3 	bl	8002f38 <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80009d8:	f000 f96e 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 80009dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2208      	movs	r2, #8
 80009e6:	4619      	mov	r1, r3
 80009e8:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <MX_TIM4_Init+0x118>)
 80009ea:	f002 faa5 	bl	8002f38 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 80009f4:	f000 f960 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <MX_TIM4_Init+0x118>)
 80009fa:	f000 f9ff 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 80009fe:	bf00      	nop
 8000a00:	3738      	adds	r7, #56	@ 0x38
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000d4 	.word	0x200000d4
 8000a0c:	40000800 	.word	0x40000800

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <MX_USART2_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a48:	f002 ff7c 	bl	8003944 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f000 f931 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000011c 	.word	0x2000011c
 8000a60:	40004400 	.word	0x40004400

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a3b      	ldr	r2, [pc, #236]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a34      	ldr	r2, [pc, #208]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a2d      	ldr	r2, [pc, #180]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a26      	ldr	r2, [pc, #152]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <MX_GPIO_Init+0x10c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2120      	movs	r1, #32
 8000aee:	4821      	ldr	r0, [pc, #132]	@ (8000b74 <MX_GPIO_Init+0x110>)
 8000af0:	f001 faac 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000afa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481b      	ldr	r0, [pc, #108]	@ (8000b78 <MX_GPIO_Init+0x114>)
 8000b0c:	f001 f91a 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : plus_bt_Pin minus_bt_Pin */
  GPIO_InitStruct.Pin = plus_bt_Pin|minus_bt_Pin;
 8000b10:	230c      	movs	r3, #12
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_GPIO_Init+0x114>)
 8000b26:	f001 f90d 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <MX_GPIO_Init+0x110>)
 8000b42:	f001 f8ff 	bl	8001d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2008      	movs	r0, #8
 8000b4c:	f001 f8c3 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b50:	2008      	movs	r0, #8
 8000b52:	f001 f8dc 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2009      	movs	r0, #9
 8000b5c:	f001 f8bb 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b60:	2009      	movs	r0, #9
 8000b62:	f001 f8d4 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	@ 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020800 	.word	0x40020800

08000b7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	 {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	 	if(htim->Instance == TIM4)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d126      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x60>
	 	{
	 		time4CntFlag = 1;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
	 		time4Cnt++; //1msec마다 증가
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b9c:	6013      	str	r3, [r2, #0]
	 		if(time4Cnt % 100) //1ms*100 =100ms
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba8:	095b      	lsrs	r3, r3, #5
 8000baa:	2164      	movs	r1, #100	@ 0x64
 8000bac:	fb01 f303 	mul.w	r3, r1, r3
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>
	 				time4_100msFlag = 1;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
	 		if(time4Cnt >= 1000)
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bc4:	d30a      	bcc.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x60>
	 		{
	 			time4SecCnt++; //1초마다 증가
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bce:	6013      	str	r3, [r2, #0]
	 			time4SecFlag = 1;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
	 			time4Cnt = 0;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
	 		}
	 	}
	 }
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	40000800 	.word	0x40000800
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	2000016c 	.word	0x2000016c
 8000bf4:	51eb851f 	.word	0x51eb851f
 8000bf8:	20000170 	.word	0x20000170
 8000bfc:	20000168 	.word	0x20000168
 8000c00:	20000164 	.word	0x20000164

08000c04 <HAL_GPIO_EXTI_Callback>:
	 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
	 {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
		 switch(GPIO_PIN)
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d002      	beq.n	8000c1a <HAL_GPIO_EXTI_Callback+0x16>
 8000c14:	2b08      	cmp	r3, #8
 8000c16:	d004      	beq.n	8000c22 <HAL_GPIO_EXTI_Callback+0x1e>
		 		 break;
		 	 case minus_bt_Pin:
		 		 keyno = 2;
		 		 break;
		 }
	 }
 8000c18:	e007      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x26>
		 		 keyno = 1;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
		 		 break;
 8000c20:	e003      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x26>
		 		 keyno = 2;
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	601a      	str	r2, [r3, #0]
		 		 break;
 8000c28:	bf00      	nop
	 }
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000178 	.word	0x20000178

08000c3c <__io_putchar>:
	   * @brief  Retargets the C library printf function to the USART.
	   * @param  None
	   * @retval None
	   */
	 PUTCHAR_PROTOTYPE
	 {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	   /* Place your implementation of fputc here */
	   /* e.g. write a character to the USART6 and Loop until the end of transmission */
	   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c44:	1d39      	adds	r1, r7, #4
 8000c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <__io_putchar+0x20>)
 8000c4e:	f002 fec9 	bl	80039e4 <HAL_UART_Transmit>

	   return ch;
 8000c52:	687b      	ldr	r3, [r7, #4]
	 }
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000011c 	.word	0x2000011c

08000c60 <HAL_ADC_ConvCpltCallback>:

	 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	 {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	     if (hadc->Instance == ADC1)   // 사용 중인 ADC 확인
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d115      	bne.n	8000c9e <HAL_ADC_ConvCpltCallback+0x3e>
	     {
	         uint32_t adcValue = HAL_ADC_GetValue(hadc);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 fcfa 	bl	800166c <HAL_ADC_GetValue>
 8000c78:	60f8      	str	r0, [r7, #12]

	         // 12비트 ADC 값(0~4095)을 PWM 범위(0~ARR)로 매핑
	         pwmValue = (adcValue * __HAL_TIM_GET_AUTORELOAD(&htim4)) / 4095;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x4c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	fb03 f202 	mul.w	r2, r3, r2
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000c88:	fba3 1302 	umull	r1, r3, r3, r2
 8000c8c:	1ad2      	subs	r2, r2, r3
 8000c8e:	0852      	lsrs	r2, r2, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	0adb      	lsrs	r3, r3, #11
 8000c94:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000c96:	6013      	str	r3, [r2, #0]

	         // 다음 변환을 위해 다시 ADC 시작 (연속 변환이 아니면 필요)
	         HAL_ADC_Start_IT(hadc);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 fb19 	bl	80012d0 <HAL_ADC_Start_IT>
	     }
	 }
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	200000d4 	.word	0x200000d4
 8000cb0:	00100101 	.word	0x00100101
 8000cb4:	2000017c 	.word	0x2000017c

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <Error_Handler+0x8>

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d02:	2007      	movs	r0, #7
 8000d04:	f000 ffdc 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <HAL_ADC_MspInit+0x8c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12f      	bne.n	8000d96 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <HAL_ADC_MspInit+0x90>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a19      	ldr	r2, [pc, #100]	@ (8000da4 <HAL_ADC_MspInit+0x90>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <HAL_ADC_MspInit+0x90>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <HAL_ADC_MspInit+0x90>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <HAL_ADC_MspInit+0x90>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_ADC_MspInit+0x90>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d72:	2303      	movs	r3, #3
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4809      	ldr	r0, [pc, #36]	@ (8000da8 <HAL_ADC_MspInit+0x94>)
 8000d82:	f000 ffdf 	bl	8001d44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2012      	movs	r0, #18
 8000d8c:	f000 ffa3 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d90:	2012      	movs	r0, #18
 8000d92:	f000 ffbc 	bl	8001d0e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40012000 	.word	0x40012000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020800 	.word	0x40020800

08000dac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <HAL_TIM_Base_MspInit+0x48>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d115      	bne.n	8000dea <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <HAL_TIM_Base_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000df8 <HAL_TIM_Base_MspInit+0x4c>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <HAL_TIM_Base_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	201e      	movs	r0, #30
 8000de0:	f000 ff79 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000de4:	201e      	movs	r0, #30
 8000de6:	f000 ff92 	bl	8001d0e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40000800 	.word	0x40000800
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <HAL_TIM_MspPostInit+0x68>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d11e      	bne.n	8000e5c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <HAL_TIM_MspPostInit+0x6c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <HAL_TIM_MspPostInit+0x6c>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <HAL_TIM_MspPostInit+0x6c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e3a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000e3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <HAL_TIM_MspPostInit+0x70>)
 8000e58:	f000 ff74 	bl	8001d44 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40000800 	.word	0x40000800
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400

08000e70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <HAL_UART_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12b      	bne.n	8000eea <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <HAL_UART_MspInit+0x8c>)
 8000ee6:	f000 ff2d 	bl	8001d44 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	@ 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f56:	f000 f957 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(plus_bt_Pin);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f001 f88c 	bl	8002080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(minus_bt_Pin);
 8000f70:	2008      	movs	r0, #8
 8000f72:	f001 f885 	bl	8002080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <ADC_IRQHandler+0x10>)
 8000f82:	f000 fa63 	bl	800144c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000008c 	.word	0x2000008c

08000f90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <TIM4_IRQHandler+0x10>)
 8000f96:	f001 fedf 	bl	8002d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000d4 	.word	0x200000d4

08000fa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00a      	b.n	8000fcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb6:	f3af 8000 	nop.w
 8000fba:	4601      	mov	r1, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf0      	blt.n	8000fb6 <_read+0x12>
  }

  return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e009      	b.n	8001004 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe1f 	bl	8000c3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <_write+0x12>
  }
  return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_close>:

int _close(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103e:	605a      	str	r2, [r3, #4]
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_isatty>:

int _isatty(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f003 faac 	bl	800460c <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000180 	.word	0x20000180
 80010e8:	200002d8 	.word	0x200002d8

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001148 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001114:	f7ff ffea 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	@ (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f003 fa6b 	bl	8004618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fa33 	bl	80005ac <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001154:	08005114 	.word	0x08005114
  ldr r2, =_sbss
 8001158:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800115c:	200002d4 	.word	0x200002d4

08001160 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <DMA1_Stream0_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 fd97 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f808 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fd94 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x54>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_InitTick+0x58>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fdaf 	bl	8001d2a <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 fd77 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <HAL_InitTick+0x5c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000010 	.word	0x20000010
 8001204:	2000000c 	.word	0x2000000c

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000010 	.word	0x20000010
 800122c:	20000184 	.word	0x20000184

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000184 	.word	0x20000184

08001248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e033      	b.n	80012c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fd54 	bl	8000d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	2b00      	cmp	r3, #0
 8001284:	d118      	bne.n	80012b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800128e:	f023 0302 	bic.w	r3, r3, #2
 8001292:	f043 0202 	orr.w	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fb3a 	bl	8001914 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f023 0303 	bic.w	r3, r3, #3
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b6:	e001      	b.n	80012bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Start_IT+0x1a>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e0a1      	b.n	800142e <HAL_ADC_Start_IT+0x15e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d018      	beq.n	8001332 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001310:	4b4a      	ldr	r3, [pc, #296]	@ (800143c <HAL_ADC_Start_IT+0x16c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a4a      	ldr	r2, [pc, #296]	@ (8001440 <HAL_ADC_Start_IT+0x170>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0c9a      	lsrs	r2, r3, #18
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001324:	e002      	b.n	800132c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b01      	cmp	r3, #1
 800133e:	d169      	bne.n	8001414 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800136a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800137e:	d106      	bne.n	800138e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001384:	f023 0206 	bic.w	r2, r3, #6
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	645a      	str	r2, [r3, #68]	@ 0x44
 800138c:	e002      	b.n	8001394 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139c:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <HAL_ADC_Start_IT+0x174>)
 800139e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013a8:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d129      	bne.n	800142c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e020      	b.n	800142c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <HAL_ADC_Start_IT+0x178>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d11b      	bne.n	800142c <HAL_ADC_Start_IT+0x15c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d114      	bne.n	800142c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	e00b      	b.n	800142c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	f043 0210 	orr.w	r2, r3, #16
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008
 8001440:	431bde83 	.word	0x431bde83
 8001444:	40012300 	.word	0x40012300
 8001448:	40012000 	.word	0x40012000

0800144c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d049      	beq.n	8001516 <HAL_ADC_IRQHandler+0xca>
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d046      	beq.n	8001516 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d12b      	bne.n	8001506 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d127      	bne.n	8001506 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d119      	bne.n	8001506 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0220 	bic.w	r2, r2, #32
 80014e0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fbaa 	bl	8000c60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f06f 0212 	mvn.w	r2, #18
 8001514:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001524:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d057      	beq.n	80015dc <HAL_ADC_IRQHandler+0x190>
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d054      	beq.n	80015dc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d139      	bne.n	80015cc <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001570:	2b00      	cmp	r3, #0
 8001572:	d12b      	bne.n	80015cc <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	d124      	bne.n	80015cc <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11d      	bne.n	80015cc <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001594:	2b00      	cmp	r3, #0
 8001596:	d119      	bne.n	80015cc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	f043 0201 	orr.w	r2, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fa9d 	bl	8001b0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f06f 020c 	mvn.w	r2, #12
 80015da:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ea:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d017      	beq.n	8001622 <HAL_ADC_IRQHandler+0x1d6>
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d014      	beq.n	8001622 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d10d      	bne.n	8001622 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f837 	bl	8001686 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f06f 0201 	mvn.w	r2, #1
 8001620:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 0320 	and.w	r3, r3, #32
 8001628:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001630:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d015      	beq.n	8001664 <HAL_ADC_IRQHandler+0x218>
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d012      	beq.n	8001664 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f043 0202 	orr.w	r2, r3, #2
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f06f 0220 	mvn.w	r2, #32
 8001652:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f820 	bl	800169a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f06f 0220 	mvn.w	r2, #32
 8001662:	601a      	str	r2, [r3, #0]
  }
}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x1c>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e113      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x244>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b09      	cmp	r3, #9
 80016da:	d925      	bls.n	8001728 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68d9      	ldr	r1, [r3, #12]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	3b1e      	subs	r3, #30
 80016f2:	2207      	movs	r2, #7
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43da      	mvns	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	400a      	ands	r2, r1
 8001700:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68d9      	ldr	r1, [r3, #12]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	4603      	mov	r3, r0
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4403      	add	r3, r0
 800171a:	3b1e      	subs	r3, #30
 800171c:	409a      	lsls	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	e022      	b.n	800176e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	2207      	movs	r2, #7
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	400a      	ands	r2, r1
 800174a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6919      	ldr	r1, [r3, #16]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	4603      	mov	r3, r0
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4403      	add	r3, r0
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b06      	cmp	r3, #6
 8001774:	d824      	bhi.n	80017c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b05      	subs	r3, #5
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b05      	subs	r3, #5
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80017be:	e04c      	b.n	800185a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d824      	bhi.n	8001812 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b23      	subs	r3, #35	@ 0x23
 80017da:	221f      	movs	r2, #31
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43da      	mvns	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	400a      	ands	r2, r1
 80017e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b23      	subs	r3, #35	@ 0x23
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001810:	e023      	b.n	800185a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	3b41      	subs	r3, #65	@ 0x41
 8001824:	221f      	movs	r2, #31
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	400a      	ands	r2, r1
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	3b41      	subs	r3, #65	@ 0x41
 800184e:	fa00 f203 	lsl.w	r2, r0, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800185a:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <HAL_ADC_ConfigChannel+0x250>)
 800185c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a28      	ldr	r2, [pc, #160]	@ (8001904 <HAL_ADC_ConfigChannel+0x254>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d10f      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1d8>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b12      	cmp	r3, #18
 800186e:	d10b      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1d      	ldr	r2, [pc, #116]	@ (8001904 <HAL_ADC_ConfigChannel+0x254>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12b      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x23a>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1c      	ldr	r2, [pc, #112]	@ (8001908 <HAL_ADC_ConfigChannel+0x258>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d003      	beq.n	80018a4 <HAL_ADC_ConfigChannel+0x1f4>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b11      	cmp	r3, #17
 80018a2:	d122      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_ADC_ConfigChannel+0x258>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d111      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_ADC_ConfigChannel+0x25c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a11      	ldr	r2, [pc, #68]	@ (8001910 <HAL_ADC_ConfigChannel+0x260>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40012300 	.word	0x40012300
 8001904:	40012000 	.word	0x40012000
 8001908:	10000012 	.word	0x10000012
 800190c:	20000008 	.word	0x20000008
 8001910:	431bde83 	.word	0x431bde83

08001914 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800191c:	4b79      	ldr	r3, [pc, #484]	@ (8001b04 <ADC_Init+0x1f0>)
 800191e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	431a      	orrs	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	021a      	lsls	r2, r3, #8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800196c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6899      	ldr	r1, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a6:	4a58      	ldr	r2, [pc, #352]	@ (8001b08 <ADC_Init+0x1f4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d022      	beq.n	80019f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6899      	ldr	r1, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e00f      	b.n	8001a12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a10:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0202 	bic.w	r2, r2, #2
 8001a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7e1b      	ldrb	r3, [r3, #24]
 8001a2c:	005a      	lsls	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01b      	beq.n	8001a78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a4e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6859      	ldr	r1, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	035a      	lsls	r2, r3, #13
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	e007      	b.n	8001a88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a86:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	051a      	lsls	r2, r3, #20
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aca:	025a      	lsls	r2, r3, #9
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6899      	ldr	r1, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	029a      	lsls	r2, r3, #10
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	609a      	str	r2, [r3, #8]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40012300 	.word	0x40012300
 8001b08:	0f000001 	.word	0x0f000001

08001b0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <__NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db0b      	blt.n	8001bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	4907      	ldr	r1, [pc, #28]	@ (8001bbc <__NVIC_EnableIRQ+0x38>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	@ (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff8e 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff29 	bl	8001b20 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff3e 	bl	8001b68 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff8e 	bl	8001c14 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5d 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff31 	bl	8001b84 <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa2 	bl	8001c7c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e159      	b.n	8002014 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f040 8148 	bne.w	800200e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d005      	beq.n	8001d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d130      	bne.n	8001df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a2 	beq.w	800200e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b57      	ldr	r3, [pc, #348]	@ (800202c <HAL_GPIO_Init+0x2e8>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	4a56      	ldr	r2, [pc, #344]	@ (800202c <HAL_GPIO_Init+0x2e8>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eda:	4b54      	ldr	r3, [pc, #336]	@ (800202c <HAL_GPIO_Init+0x2e8>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee6:	4a52      	ldr	r2, [pc, #328]	@ (8002030 <HAL_GPIO_Init+0x2ec>)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a49      	ldr	r2, [pc, #292]	@ (8002034 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_GPIO_Init+0x202>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a48      	ldr	r2, [pc, #288]	@ (8002038 <HAL_GPIO_Init+0x2f4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0x1fe>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a47      	ldr	r2, [pc, #284]	@ (800203c <HAL_GPIO_Init+0x2f8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00d      	beq.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a46      	ldr	r2, [pc, #280]	@ (8002040 <HAL_GPIO_Init+0x2fc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_Init+0x1f6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a45      	ldr	r2, [pc, #276]	@ (8002044 <HAL_GPIO_Init+0x300>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_GPIO_Init+0x1f2>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e008      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f46:	2300      	movs	r3, #0
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f58:	4935      	ldr	r1, [pc, #212]	@ (8002030 <HAL_GPIO_Init+0x2ec>)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b38      	ldr	r3, [pc, #224]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a24      	ldr	r2, [pc, #144]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fde:	4a1a      	ldr	r2, [pc, #104]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002008:	4a0f      	ldr	r2, [pc, #60]	@ (8002048 <HAL_GPIO_Init+0x304>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	f67f aea2 	bls.w	8001d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	40013800 	.word	0x40013800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40021000 	.word	0x40021000
 8002048:	40013c00 	.word	0x40013c00

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	619a      	str	r2, [r3, #24]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002096:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fdb0 	bl	8000c04 <HAL_GPIO_EXTI_Callback>
  }
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40013c00 	.word	0x40013c00

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e267      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d075      	beq.n	80021ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020ce:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d00c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020da:	4b85      	ldr	r3, [pc, #532]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d112      	bne.n	800210c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e6:	4b82      	ldr	r3, [pc, #520]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020f2:	d10b      	bne.n	800210c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	4b7e      	ldr	r3, [pc, #504]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d05b      	beq.n	80021b8 <HAL_RCC_OscConfig+0x108>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d157      	bne.n	80021b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e242      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0x74>
 8002116:	4b76      	ldr	r3, [pc, #472]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a75      	ldr	r2, [pc, #468]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e01d      	b.n	8002160 <HAL_RCC_OscConfig+0xb0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x98>
 800212e:	4b70      	ldr	r3, [pc, #448]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6f      	ldr	r2, [pc, #444]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b6d      	ldr	r3, [pc, #436]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6c      	ldr	r2, [pc, #432]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0xb0>
 8002148:	4b69      	ldr	r3, [pc, #420]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a68      	ldr	r2, [pc, #416]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b66      	ldr	r3, [pc, #408]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800215e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff f862 	bl	8001230 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff f85e 	bl	8001230 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	@ 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e207      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b5b      	ldr	r3, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0xc0>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff f84e 	bl	8001230 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff f84a 	bl	8001230 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	@ 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1f3      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	4b51      	ldr	r3, [pc, #324]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0xe8>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d063      	beq.n	800228e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021c6:	4b4a      	ldr	r3, [pc, #296]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d2:	4b47      	ldr	r3, [pc, #284]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d11c      	bne.n	8002218 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021de:	4b44      	ldr	r3, [pc, #272]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d116      	bne.n	8002218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x152>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e1c7      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b3b      	ldr	r3, [pc, #236]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4937      	ldr	r1, [pc, #220]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	e03a      	b.n	800228e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002220:	4b34      	ldr	r3, [pc, #208]	@ (80022f4 <HAL_RCC_OscConfig+0x244>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff f803 	bl	8001230 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe ffff 	bl	8001230 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e1a8      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b28      	ldr	r3, [pc, #160]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4925      	ldr	r1, [pc, #148]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002262:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <HAL_RCC_OscConfig+0x244>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe ffe2 	bl	8001230 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7fe ffde 	bl	8001230 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e187      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d036      	beq.n	8002308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d016      	beq.n	80022d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_RCC_OscConfig+0x248>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7fe ffc2 	bl	8001230 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7fe ffbe 	bl	8001230 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e167      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80022c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x200>
 80022ce:	e01b      	b.n	8002308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_RCC_OscConfig+0x248>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f7fe ffab 	bl	8001230 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	e00e      	b.n	80022fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7fe ffa7 	bl	8001230 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d907      	bls.n	80022fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e150      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	42470000 	.word	0x42470000
 80022f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	4b88      	ldr	r3, [pc, #544]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ea      	bne.n	80022de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8097 	beq.w	8002444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231a:	4b81      	ldr	r3, [pc, #516]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	4b7d      	ldr	r3, [pc, #500]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	4a7c      	ldr	r2, [pc, #496]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002334:	6413      	str	r3, [r2, #64]	@ 0x40
 8002336:	4b7a      	ldr	r3, [pc, #488]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b77      	ldr	r3, [pc, #476]	@ (8002524 <HAL_RCC_OscConfig+0x474>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002352:	4b74      	ldr	r3, [pc, #464]	@ (8002524 <HAL_RCC_OscConfig+0x474>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a73      	ldr	r2, [pc, #460]	@ (8002524 <HAL_RCC_OscConfig+0x474>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7fe ff67 	bl	8001230 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe ff63 	bl	8001230 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e10c      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <HAL_RCC_OscConfig+0x474>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x2ea>
 800238c:	4b64      	ldr	r3, [pc, #400]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	4a63      	ldr	r2, [pc, #396]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6713      	str	r3, [r2, #112]	@ 0x70
 8002398:	e01c      	b.n	80023d4 <HAL_RCC_OscConfig+0x324>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x30c>
 80023a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0x324>
 80023bc:	4b58      	ldr	r3, [pc, #352]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	4a57      	ldr	r2, [pc, #348]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c8:	4b55      	ldr	r3, [pc, #340]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023cc:	4a54      	ldr	r2, [pc, #336]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023ce:	f023 0304 	bic.w	r3, r3, #4
 80023d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe ff28 	bl	8001230 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe ff24 	bl	8001230 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0cb      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fa:	4b49      	ldr	r3, [pc, #292]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0ee      	beq.n	80023e4 <HAL_RCC_OscConfig+0x334>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe ff12 	bl	8001230 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe ff0e 	bl	8001230 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0b5      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002426:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ee      	bne.n	8002410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d105      	bne.n	8002444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002438:	4b39      	ldr	r3, [pc, #228]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	4a38      	ldr	r2, [pc, #224]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800243e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002442:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a1 	beq.w	8002590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800244e:	4b34      	ldr	r3, [pc, #208]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d05c      	beq.n	8002514 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d141      	bne.n	80024e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_RCC_OscConfig+0x478>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fee2 	bl	8001230 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fede 	bl	8001230 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e087      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	4b27      	ldr	r3, [pc, #156]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	3b01      	subs	r3, #1
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	491b      	ldr	r1, [pc, #108]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x478>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe feb7 	bl	8001230 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe feb3 	bl	8001230 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e05c      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x416>
 80024e4:	e054      	b.n	8002590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_RCC_OscConfig+0x478>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fea0 	bl	8001230 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fe9c 	bl	8001230 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e045      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x444>
 8002512:	e03d      	b.n	8002590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e038      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
 8002520:	40023800 	.word	0x40023800
 8002524:	40007000 	.word	0x40007000
 8002528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x4ec>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d028      	beq.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d121      	bne.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d11a      	bne.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002564:	4293      	cmp	r3, r2
 8002566:	d111      	bne.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0cc      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b68      	ldr	r3, [pc, #416]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d90c      	bls.n	80025dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b65      	ldr	r3, [pc, #404]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b8      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f4:	4b59      	ldr	r3, [pc, #356]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a58      	ldr	r2, [pc, #352]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800260c:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a52      	ldr	r2, [pc, #328]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b50      	ldr	r3, [pc, #320]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	494d      	ldr	r1, [pc, #308]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d044      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d119      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e07f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d003      	beq.n	800265e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265a:	2b03      	cmp	r3, #3
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	4b3f      	ldr	r3, [pc, #252]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e06f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e067      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b37      	ldr	r3, [pc, #220]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4934      	ldr	r1, [pc, #208]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7fe fdce 	bl	8001230 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	e00a      	b.n	80026ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f7fe fdca 	bl	8001230 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e04f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 020c 	and.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1eb      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c0:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d20c      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e032      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b19      	ldr	r3, [pc, #100]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4916      	ldr	r1, [pc, #88]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002712:	4b12      	ldr	r3, [pc, #72]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	490e      	ldr	r1, [pc, #56]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002726:	f000 f821 	bl	800276c <HAL_RCC_GetSysClockFreq>
 800272a:	4602      	mov	r2, r0
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	490a      	ldr	r1, [pc, #40]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	5ccb      	ldrb	r3, [r1, r3]
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fd2e 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00
 800275c:	40023800 	.word	0x40023800
 8002760:	080050b8 	.word	0x080050b8
 8002764:	20000008 	.word	0x20000008
 8002768:	2000000c 	.word	0x2000000c

0800276c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002770:	b094      	sub	sp, #80	@ 0x50
 8002772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002784:	4b79      	ldr	r3, [pc, #484]	@ (800296c <HAL_RCC_GetSysClockFreq+0x200>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d00d      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x40>
 8002790:	2b08      	cmp	r3, #8
 8002792:	f200 80e1 	bhi.w	8002958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x34>
 800279a:	2b04      	cmp	r3, #4
 800279c:	d003      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800279e:	e0db      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a0:	4b73      	ldr	r3, [pc, #460]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x204>)
 80027a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027a4:	e0db      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a6:	4b73      	ldr	r3, [pc, #460]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x208>)
 80027a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027aa:	e0d8      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ac:	4b6f      	ldr	r3, [pc, #444]	@ (800296c <HAL_RCC_GetSysClockFreq+0x200>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b6:	4b6d      	ldr	r3, [pc, #436]	@ (800296c <HAL_RCC_GetSysClockFreq+0x200>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d063      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c2:	4b6a      	ldr	r3, [pc, #424]	@ (800296c <HAL_RCC_GetSysClockFreq+0x200>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	099b      	lsrs	r3, r3, #6
 80027c8:	2200      	movs	r2, #0
 80027ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027d6:	2300      	movs	r3, #0
 80027d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80027da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027de:	4622      	mov	r2, r4
 80027e0:	462b      	mov	r3, r5
 80027e2:	f04f 0000 	mov.w	r0, #0
 80027e6:	f04f 0100 	mov.w	r1, #0
 80027ea:	0159      	lsls	r1, r3, #5
 80027ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f0:	0150      	lsls	r0, r2, #5
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4621      	mov	r1, r4
 80027f8:	1a51      	subs	r1, r2, r1
 80027fa:	6139      	str	r1, [r7, #16]
 80027fc:	4629      	mov	r1, r5
 80027fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002810:	4659      	mov	r1, fp
 8002812:	018b      	lsls	r3, r1, #6
 8002814:	4651      	mov	r1, sl
 8002816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800281a:	4651      	mov	r1, sl
 800281c:	018a      	lsls	r2, r1, #6
 800281e:	4651      	mov	r1, sl
 8002820:	ebb2 0801 	subs.w	r8, r2, r1
 8002824:	4659      	mov	r1, fp
 8002826:	eb63 0901 	sbc.w	r9, r3, r1
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800283a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800283e:	4690      	mov	r8, r2
 8002840:	4699      	mov	r9, r3
 8002842:	4623      	mov	r3, r4
 8002844:	eb18 0303 	adds.w	r3, r8, r3
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	462b      	mov	r3, r5
 800284c:	eb49 0303 	adc.w	r3, r9, r3
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800285e:	4629      	mov	r1, r5
 8002860:	024b      	lsls	r3, r1, #9
 8002862:	4621      	mov	r1, r4
 8002864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002868:	4621      	mov	r1, r4
 800286a:	024a      	lsls	r2, r1, #9
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002872:	2200      	movs	r2, #0
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800287c:	f7fd fd00 	bl	8000280 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4613      	mov	r3, r2
 8002886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002888:	e058      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288a:	4b38      	ldr	r3, [pc, #224]	@ (800296c <HAL_RCC_GetSysClockFreq+0x200>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	099b      	lsrs	r3, r3, #6
 8002890:	2200      	movs	r2, #0
 8002892:	4618      	mov	r0, r3
 8002894:	4611      	mov	r1, r2
 8002896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028a4:	4642      	mov	r2, r8
 80028a6:	464b      	mov	r3, r9
 80028a8:	f04f 0000 	mov.w	r0, #0
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	0159      	lsls	r1, r3, #5
 80028b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b6:	0150      	lsls	r0, r2, #5
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4641      	mov	r1, r8
 80028be:	ebb2 0a01 	subs.w	sl, r2, r1
 80028c2:	4649      	mov	r1, r9
 80028c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028dc:	ebb2 040a 	subs.w	r4, r2, sl
 80028e0:	eb63 050b 	sbc.w	r5, r3, fp
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	00eb      	lsls	r3, r5, #3
 80028ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f2:	00e2      	lsls	r2, r4, #3
 80028f4:	4614      	mov	r4, r2
 80028f6:	461d      	mov	r5, r3
 80028f8:	4643      	mov	r3, r8
 80028fa:	18e3      	adds	r3, r4, r3
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	464b      	mov	r3, r9
 8002900:	eb45 0303 	adc.w	r3, r5, r3
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002912:	4629      	mov	r1, r5
 8002914:	028b      	lsls	r3, r1, #10
 8002916:	4621      	mov	r1, r4
 8002918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800291c:	4621      	mov	r1, r4
 800291e:	028a      	lsls	r2, r1, #10
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002926:	2200      	movs	r2, #0
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	61fa      	str	r2, [r7, #28]
 800292c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002930:	f7fd fca6 	bl	8000280 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4613      	mov	r3, r2
 800293a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_RCC_GetSysClockFreq+0x200>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800294c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800294e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002956:	e002      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x204>)
 800295a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800295c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002960:	4618      	mov	r0, r3
 8002962:	3750      	adds	r7, #80	@ 0x50
 8002964:	46bd      	mov	sp, r7
 8002966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b03      	ldr	r3, [pc, #12]	@ (800298c <HAL_RCC_GetHCLKFreq+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000008 	.word	0x20000008

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002994:	f7ff fff0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0a9b      	lsrs	r3, r3, #10
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	080050c8 	.word	0x080050c8

080029b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029bc:	f7ff ffdc 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0b5b      	lsrs	r3, r3, #13
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	@ (80029dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	080050c8 	.word	0x080050c8

080029e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e041      	b.n	8002a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe f9d0 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 fc3c 	bl	800329c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d001      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e044      	b.n	8002b22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d018      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac2:	d013      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <HAL_TIM_Base_Start_IT+0xb4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00e      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a19      	ldr	r2, [pc, #100]	@ (8002b38 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x6c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	@ (8002b40 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d111      	bne.n	8002b10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d010      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	e007      	b.n	8002b20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	40000c00 	.word	0x40000c00
 8002b40:	40014000 	.word	0x40014000

08002b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e041      	b.n	8002bda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f839 	bl	8002be2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f000 fb8a 	bl	800329c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_TIM_PWM_Start+0x24>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e022      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d109      	bne.n	8002c36 <HAL_TIM_PWM_Start+0x3e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	e015      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d109      	bne.n	8002c50 <HAL_TIM_PWM_Start+0x58>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e008      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e068      	b.n	8002d3c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <HAL_TIM_PWM_Start+0x82>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c78:	e013      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_PWM_Start+0x92>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c88:	e00b      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0xa2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c98:	e003      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fda2 	bl	80037f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a23      	ldr	r2, [pc, #140]	@ (8002d44 <HAL_TIM_PWM_Start+0x14c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1d      	ldr	r2, [pc, #116]	@ (8002d44 <HAL_TIM_PWM_Start+0x14c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d018      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x10e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cdc:	d013      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x10e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <HAL_TIM_PWM_Start+0x150>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x10e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a17      	ldr	r2, [pc, #92]	@ (8002d4c <HAL_TIM_PWM_Start+0x154>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x10e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a16      	ldr	r2, [pc, #88]	@ (8002d50 <HAL_TIM_PWM_Start+0x158>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x10e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a14      	ldr	r2, [pc, #80]	@ (8002d54 <HAL_TIM_PWM_Start+0x15c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d111      	bne.n	8002d2a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d010      	beq.n	8002d3a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d28:	e007      	b.n	8002d3a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	40000c00 	.word	0x40000c00
 8002d54:	40014000 	.word	0x40014000

08002d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d020      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01b      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0202 	mvn.w	r2, #2
 8002d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa5b 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa4d 	bl	800324a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa5e 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d020      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01b      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0204 	mvn.w	r2, #4
 8002dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa35 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002df4:	e005      	b.n	8002e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa27 	bl	800324a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fa38 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d020      	beq.n	8002e54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01b      	beq.n	8002e54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0208 	mvn.w	r2, #8
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa0f 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa01 	bl	800324a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa12 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d020      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01b      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0210 	mvn.w	r2, #16
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2208      	movs	r2, #8
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f9e9 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f9db 	bl	800324a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f9ec 	bl	8003272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0201 	mvn.w	r2, #1
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd fe5c 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fd24 	bl	8003930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00c      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f9bd 	bl	8003286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0220 	mvn.w	r2, #32
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fcf6 	bl	800391c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e0ae      	b.n	80030b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	f200 809f 	bhi.w	80030a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f66:	a201      	add	r2, pc, #4	@ (adr r2, 8002f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	080030a5 	.word	0x080030a5
 8002f74:	080030a5 	.word	0x080030a5
 8002f78:	080030a5 	.word	0x080030a5
 8002f7c:	08002fe1 	.word	0x08002fe1
 8002f80:	080030a5 	.word	0x080030a5
 8002f84:	080030a5 	.word	0x080030a5
 8002f88:	080030a5 	.word	0x080030a5
 8002f8c:	08003023 	.word	0x08003023
 8002f90:	080030a5 	.word	0x080030a5
 8002f94:	080030a5 	.word	0x080030a5
 8002f98:	080030a5 	.word	0x080030a5
 8002f9c:	08003063 	.word	0x08003063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f9fe 	bl	80033a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0208 	orr.w	r2, r2, #8
 8002fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0204 	bic.w	r2, r2, #4
 8002fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6999      	ldr	r1, [r3, #24]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	619a      	str	r2, [r3, #24]
      break;
 8002fde:	e064      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fa44 	bl	8003474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800300a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6999      	ldr	r1, [r3, #24]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	619a      	str	r2, [r3, #24]
      break;
 8003020:	e043      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fa8f 	bl	800354c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0208 	orr.w	r2, r2, #8
 800303c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0204 	bic.w	r2, r2, #4
 800304c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69d9      	ldr	r1, [r3, #28]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	61da      	str	r2, [r3, #28]
      break;
 8003060:	e023      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fad9 	bl	8003620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800307c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800308c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69d9      	ldr	r1, [r3, #28]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	021a      	lsls	r2, r3, #8
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	61da      	str	r2, [r3, #28]
      break;
 80030a2:	e002      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
      break;
 80030a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_ConfigClockSource+0x1c>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0b4      	b.n	8003242 <HAL_TIM_ConfigClockSource+0x186>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003110:	d03e      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0xd4>
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003116:	f200 8087 	bhi.w	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311e:	f000 8086 	beq.w	800322e <HAL_TIM_ConfigClockSource+0x172>
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003126:	d87f      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b70      	cmp	r3, #112	@ 0x70
 800312a:	d01a      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0xa6>
 800312c:	2b70      	cmp	r3, #112	@ 0x70
 800312e:	d87b      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b60      	cmp	r3, #96	@ 0x60
 8003132:	d050      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003134:	2b60      	cmp	r3, #96	@ 0x60
 8003136:	d877      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b50      	cmp	r3, #80	@ 0x50
 800313a:	d03c      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0xfa>
 800313c:	2b50      	cmp	r3, #80	@ 0x50
 800313e:	d873      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	d058      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003144:	2b40      	cmp	r3, #64	@ 0x40
 8003146:	d86f      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b30      	cmp	r3, #48	@ 0x30
 800314a:	d064      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b30      	cmp	r3, #48	@ 0x30
 800314e:	d86b      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b20      	cmp	r3, #32
 8003152:	d060      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d867      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05c      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x15a>
 800315c:	2b10      	cmp	r3, #16
 800315e:	d05a      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x15a>
 8003160:	e062      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003172:	f000 fb1f 	bl	80037b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	609a      	str	r2, [r3, #8]
      break;
 800318e:	e04f      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031a0:	f000 fb08 	bl	80037b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031b2:	609a      	str	r2, [r3, #8]
      break;
 80031b4:	e03c      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 fa7c 	bl	80036c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2150      	movs	r1, #80	@ 0x50
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fad5 	bl	800377e <TIM_ITRx_SetConfig>
      break;
 80031d4:	e02c      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 fa9b 	bl	800371e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2160      	movs	r1, #96	@ 0x60
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fac5 	bl	800377e <TIM_ITRx_SetConfig>
      break;
 80031f4:	e01c      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003202:	461a      	mov	r2, r3
 8003204:	f000 fa5c 	bl	80036c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2140      	movs	r1, #64	@ 0x40
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fab5 	bl	800377e <TIM_ITRx_SetConfig>
      break;
 8003214:	e00c      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f000 faac 	bl	800377e <TIM_ITRx_SetConfig>
      break;
 8003226:	e003      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e000      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800322e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003240:	7bfb      	ldrb	r3, [r7, #15]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a37      	ldr	r2, [pc, #220]	@ (800338c <TIM_Base_SetConfig+0xf0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00f      	beq.n	80032d4 <TIM_Base_SetConfig+0x38>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ba:	d00b      	beq.n	80032d4 <TIM_Base_SetConfig+0x38>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a34      	ldr	r2, [pc, #208]	@ (8003390 <TIM_Base_SetConfig+0xf4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <TIM_Base_SetConfig+0x38>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a33      	ldr	r2, [pc, #204]	@ (8003394 <TIM_Base_SetConfig+0xf8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_Base_SetConfig+0x38>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a32      	ldr	r2, [pc, #200]	@ (8003398 <TIM_Base_SetConfig+0xfc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d108      	bne.n	80032e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a28      	ldr	r2, [pc, #160]	@ (800338c <TIM_Base_SetConfig+0xf0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01b      	beq.n	8003326 <TIM_Base_SetConfig+0x8a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f4:	d017      	beq.n	8003326 <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a25      	ldr	r2, [pc, #148]	@ (8003390 <TIM_Base_SetConfig+0xf4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a24      	ldr	r2, [pc, #144]	@ (8003394 <TIM_Base_SetConfig+0xf8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00f      	beq.n	8003326 <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a23      	ldr	r2, [pc, #140]	@ (8003398 <TIM_Base_SetConfig+0xfc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00b      	beq.n	8003326 <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a22      	ldr	r2, [pc, #136]	@ (800339c <TIM_Base_SetConfig+0x100>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a21      	ldr	r2, [pc, #132]	@ (80033a0 <TIM_Base_SetConfig+0x104>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a20      	ldr	r2, [pc, #128]	@ (80033a4 <TIM_Base_SetConfig+0x108>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d108      	bne.n	8003338 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800332c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <TIM_Base_SetConfig+0xf0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d103      	bne.n	8003366 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f043 0204 	orr.w	r2, r3, #4
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40010000 	.word	0x40010000
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800

080033a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f023 0201 	bic.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 0302 	bic.w	r3, r3, #2
 80033f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <TIM_OC1_SetConfig+0xc8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10c      	bne.n	800341e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0308 	bic.w	r3, r3, #8
 800340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a13      	ldr	r2, [pc, #76]	@ (8003470 <TIM_OC1_SetConfig+0xc8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d111      	bne.n	800344a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800342c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40010000 	.word	0x40010000

08003474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f023 0210 	bic.w	r2, r3, #16
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0320 	bic.w	r3, r3, #32
 80034be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <TIM_OC2_SetConfig+0xd4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10d      	bne.n	80034f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a15      	ldr	r2, [pc, #84]	@ (8003548 <TIM_OC2_SetConfig+0xd4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d113      	bne.n	8003520 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40010000 	.word	0x40010000

0800354c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <TIM_OC3_SetConfig+0xd0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d10d      	bne.n	80035c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a14      	ldr	r2, [pc, #80]	@ (800361c <TIM_OC3_SetConfig+0xd0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d113      	bne.n	80035f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	621a      	str	r2, [r3, #32]
}
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40010000 	.word	0x40010000

08003620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800364e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800366a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	031b      	lsls	r3, r3, #12
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a10      	ldr	r2, [pc, #64]	@ (80036bc <TIM_OC4_SetConfig+0x9c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d109      	bne.n	8003694 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40010000 	.word	0x40010000

080036c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0201 	bic.w	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f023 030a 	bic.w	r3, r3, #10
 80036fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800371e:	b480      	push	{r7}
 8003720:	b087      	sub	sp, #28
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f023 0210 	bic.w	r2, r3, #16
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	031b      	lsls	r3, r3, #12
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800375a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	f043 0307 	orr.w	r3, r3, #7
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	021a      	lsls	r2, r3, #8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2201      	movs	r2, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	43db      	mvns	r3, r3
 8003816:	401a      	ands	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	fa01 f303 	lsl.w	r3, r1, r3
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	621a      	str	r2, [r3, #32]
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003854:	2302      	movs	r3, #2
 8003856:	e050      	b.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1c      	ldr	r2, [pc, #112]	@ (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d018      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d013      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a18      	ldr	r2, [pc, #96]	@ (800390c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00e      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a13      	ldr	r2, [pc, #76]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10c      	bne.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40014000 	.word	0x40014000

0800391c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e042      	b.n	80039dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fa80 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	@ 0x24
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f973 	bl	8003c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800399c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	@ 0x28
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d175      	bne.n	8003af0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_UART_Transmit+0x2c>
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e06e      	b.n	8003af2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2221      	movs	r2, #33	@ 0x21
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a22:	f7fd fc05 	bl	8001230 <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a3c:	d108      	bne.n	8003a50 <HAL_UART_Transmit+0x6c>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	e003      	b.n	8003a58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a58:	e02e      	b.n	8003ab8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	@ 0x80
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f848 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e03a      	b.n	8003af2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	3302      	adds	r3, #2
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	e007      	b.n	8003aaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1cb      	bne.n	8003a5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2140      	movs	r1, #64	@ 0x40
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f814 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e006      	b.n	8003af2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	e03b      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d037      	beq.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b14:	f7fd fb8c 	bl	8001230 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	6a3a      	ldr	r2, [r7, #32]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e03a      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d023      	beq.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b80      	cmp	r3, #128	@ 0x80
 8003b40:	d020      	beq.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b40      	cmp	r3, #64	@ 0x40
 8003b46:	d01d      	beq.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d116      	bne.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f81d 	bl	8003bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2208      	movs	r2, #8
 8003b76:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e00f      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d0b4      	beq.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b095      	sub	sp, #84	@ 0x54
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bd4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e5      	bne.n	8003bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3314      	adds	r3, #20
 8003c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d119      	bne.n	8003c58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c44:	61ba      	str	r2, [r7, #24]
 8003c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6979      	ldr	r1, [r7, #20]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	613b      	str	r3, [r7, #16]
   return(result);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c66:	bf00      	nop
 8003c68:	3754      	adds	r7, #84	@ 0x54
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b0c0      	sub	sp, #256	@ 0x100
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	68d9      	ldr	r1, [r3, #12]
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	ea40 0301 	orr.w	r3, r0, r1
 8003c9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ccc:	f021 010c 	bic.w	r1, r1, #12
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cee:	6999      	ldr	r1, [r3, #24]
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	ea40 0301 	orr.w	r3, r0, r1
 8003cfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b8f      	ldr	r3, [pc, #572]	@ (8003f40 <UART_SetConfig+0x2cc>)
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d005      	beq.n	8003d14 <UART_SetConfig+0xa0>
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f44 <UART_SetConfig+0x2d0>)
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d104      	bne.n	8003d1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d14:	f7fe fe50 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 8003d18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d1c:	e003      	b.n	8003d26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d1e:	f7fe fe37 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8003d22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d30:	f040 810c 	bne.w	8003f4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d46:	4622      	mov	r2, r4
 8003d48:	462b      	mov	r3, r5
 8003d4a:	1891      	adds	r1, r2, r2
 8003d4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d4e:	415b      	adcs	r3, r3
 8003d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d56:	4621      	mov	r1, r4
 8003d58:	eb12 0801 	adds.w	r8, r2, r1
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	eb43 0901 	adc.w	r9, r3, r1
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d76:	4690      	mov	r8, r2
 8003d78:	4699      	mov	r9, r3
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	eb18 0303 	adds.w	r3, r8, r3
 8003d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d84:	462b      	mov	r3, r5
 8003d86:	eb49 0303 	adc.w	r3, r9, r3
 8003d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003da2:	460b      	mov	r3, r1
 8003da4:	18db      	adds	r3, r3, r3
 8003da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003da8:	4613      	mov	r3, r2
 8003daa:	eb42 0303 	adc.w	r3, r2, r3
 8003dae:	657b      	str	r3, [r7, #84]	@ 0x54
 8003db0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003db4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003db8:	f7fc fa62 	bl	8000280 <__aeabi_uldivmod>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4b61      	ldr	r3, [pc, #388]	@ (8003f48 <UART_SetConfig+0x2d4>)
 8003dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	011c      	lsls	r4, r3, #4
 8003dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003dd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ddc:	4642      	mov	r2, r8
 8003dde:	464b      	mov	r3, r9
 8003de0:	1891      	adds	r1, r2, r2
 8003de2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003de4:	415b      	adcs	r3, r3
 8003de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003de8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dec:	4641      	mov	r1, r8
 8003dee:	eb12 0a01 	adds.w	sl, r2, r1
 8003df2:	4649      	mov	r1, r9
 8003df4:	eb43 0b01 	adc.w	fp, r3, r1
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e0c:	4692      	mov	sl, r2
 8003e0e:	469b      	mov	fp, r3
 8003e10:	4643      	mov	r3, r8
 8003e12:	eb1a 0303 	adds.w	r3, sl, r3
 8003e16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	18db      	adds	r3, r3, r3
 8003e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e3e:	4613      	mov	r3, r2
 8003e40:	eb42 0303 	adc.w	r3, r2, r3
 8003e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e4e:	f7fc fa17 	bl	8000280 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	4b3b      	ldr	r3, [pc, #236]	@ (8003f48 <UART_SetConfig+0x2d4>)
 8003e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2264      	movs	r2, #100	@ 0x64
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	1acb      	subs	r3, r1, r3
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e6e:	4b36      	ldr	r3, [pc, #216]	@ (8003f48 <UART_SetConfig+0x2d4>)
 8003e70:	fba3 2302 	umull	r2, r3, r3, r2
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e7c:	441c      	add	r4, r3
 8003e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e90:	4642      	mov	r2, r8
 8003e92:	464b      	mov	r3, r9
 8003e94:	1891      	adds	r1, r2, r2
 8003e96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e98:	415b      	adcs	r3, r3
 8003e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	1851      	adds	r1, r2, r1
 8003ea4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	414b      	adcs	r3, r1
 8003eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003eb8:	4659      	mov	r1, fp
 8003eba:	00cb      	lsls	r3, r1, #3
 8003ebc:	4651      	mov	r1, sl
 8003ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec2:	4651      	mov	r1, sl
 8003ec4:	00ca      	lsls	r2, r1, #3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4642      	mov	r2, r8
 8003ece:	189b      	adds	r3, r3, r2
 8003ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003eec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	18db      	adds	r3, r3, r3
 8003ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003efa:	4613      	mov	r3, r2
 8003efc:	eb42 0303 	adc.w	r3, r2, r3
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f0a:	f7fc f9b9 	bl	8000280 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4b0d      	ldr	r3, [pc, #52]	@ (8003f48 <UART_SetConfig+0x2d4>)
 8003f14:	fba3 1302 	umull	r1, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	2164      	movs	r1, #100	@ 0x64
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	3332      	adds	r3, #50	@ 0x32
 8003f26:	4a08      	ldr	r2, [pc, #32]	@ (8003f48 <UART_SetConfig+0x2d4>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	f003 0207 	and.w	r2, r3, #7
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4422      	add	r2, r4
 8003f3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f3c:	e106      	b.n	800414c <UART_SetConfig+0x4d8>
 8003f3e:	bf00      	nop
 8003f40:	40011000 	.word	0x40011000
 8003f44:	40011400 	.word	0x40011400
 8003f48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f5e:	4642      	mov	r2, r8
 8003f60:	464b      	mov	r3, r9
 8003f62:	1891      	adds	r1, r2, r2
 8003f64:	6239      	str	r1, [r7, #32]
 8003f66:	415b      	adcs	r3, r3
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f6e:	4641      	mov	r1, r8
 8003f70:	1854      	adds	r4, r2, r1
 8003f72:	4649      	mov	r1, r9
 8003f74:	eb43 0501 	adc.w	r5, r3, r1
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	00eb      	lsls	r3, r5, #3
 8003f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f86:	00e2      	lsls	r2, r4, #3
 8003f88:	4614      	mov	r4, r2
 8003f8a:	461d      	mov	r5, r3
 8003f8c:	4643      	mov	r3, r8
 8003f8e:	18e3      	adds	r3, r4, r3
 8003f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f94:	464b      	mov	r3, r9
 8003f96:	eb45 0303 	adc.w	r3, r5, r3
 8003f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003faa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fba:	4629      	mov	r1, r5
 8003fbc:	008b      	lsls	r3, r1, #2
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	008a      	lsls	r2, r1, #2
 8003fc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fcc:	f7fc f958 	bl	8000280 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4b60      	ldr	r3, [pc, #384]	@ (8004158 <UART_SetConfig+0x4e4>)
 8003fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	011c      	lsls	r4, r3, #4
 8003fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fe8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	1891      	adds	r1, r2, r2
 8003ff6:	61b9      	str	r1, [r7, #24]
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004000:	4641      	mov	r1, r8
 8004002:	1851      	adds	r1, r2, r1
 8004004:	6139      	str	r1, [r7, #16]
 8004006:	4649      	mov	r1, r9
 8004008:	414b      	adcs	r3, r1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004018:	4659      	mov	r1, fp
 800401a:	00cb      	lsls	r3, r1, #3
 800401c:	4651      	mov	r1, sl
 800401e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004022:	4651      	mov	r1, sl
 8004024:	00ca      	lsls	r2, r1, #3
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	4603      	mov	r3, r0
 800402c:	4642      	mov	r2, r8
 800402e:	189b      	adds	r3, r3, r2
 8004030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004034:	464b      	mov	r3, r9
 8004036:	460a      	mov	r2, r1
 8004038:	eb42 0303 	adc.w	r3, r2, r3
 800403c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800404a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004058:	4649      	mov	r1, r9
 800405a:	008b      	lsls	r3, r1, #2
 800405c:	4641      	mov	r1, r8
 800405e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004062:	4641      	mov	r1, r8
 8004064:	008a      	lsls	r2, r1, #2
 8004066:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800406a:	f7fc f909 	bl	8000280 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4611      	mov	r1, r2
 8004074:	4b38      	ldr	r3, [pc, #224]	@ (8004158 <UART_SetConfig+0x4e4>)
 8004076:	fba3 2301 	umull	r2, r3, r3, r1
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2264      	movs	r2, #100	@ 0x64
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	1acb      	subs	r3, r1, r3
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	3332      	adds	r3, #50	@ 0x32
 8004088:	4a33      	ldr	r2, [pc, #204]	@ (8004158 <UART_SetConfig+0x4e4>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004094:	441c      	add	r4, r3
 8004096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800409a:	2200      	movs	r2, #0
 800409c:	673b      	str	r3, [r7, #112]	@ 0x70
 800409e:	677a      	str	r2, [r7, #116]	@ 0x74
 80040a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	1891      	adds	r1, r2, r2
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	415b      	adcs	r3, r3
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b4:	4641      	mov	r1, r8
 80040b6:	1851      	adds	r1, r2, r1
 80040b8:	6039      	str	r1, [r7, #0]
 80040ba:	4649      	mov	r1, r9
 80040bc:	414b      	adcs	r3, r1
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040cc:	4659      	mov	r1, fp
 80040ce:	00cb      	lsls	r3, r1, #3
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040d6:	4651      	mov	r1, sl
 80040d8:	00ca      	lsls	r2, r1, #3
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	4642      	mov	r2, r8
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040e6:	464b      	mov	r3, r9
 80040e8:	460a      	mov	r2, r1
 80040ea:	eb42 0303 	adc.w	r3, r2, r3
 80040ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004108:	4649      	mov	r1, r9
 800410a:	008b      	lsls	r3, r1, #2
 800410c:	4641      	mov	r1, r8
 800410e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004112:	4641      	mov	r1, r8
 8004114:	008a      	lsls	r2, r1, #2
 8004116:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800411a:	f7fc f8b1 	bl	8000280 <__aeabi_uldivmod>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <UART_SetConfig+0x4e4>)
 8004124:	fba3 1302 	umull	r1, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	2164      	movs	r1, #100	@ 0x64
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	3332      	adds	r3, #50	@ 0x32
 8004136:	4a08      	ldr	r2, [pc, #32]	@ (8004158 <UART_SetConfig+0x4e4>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4422      	add	r2, r4
 800414a:	609a      	str	r2, [r3, #8]
}
 800414c:	bf00      	nop
 800414e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004152:	46bd      	mov	sp, r7
 8004154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004158:	51eb851f 	.word	0x51eb851f

0800415c <std>:
 800415c:	2300      	movs	r3, #0
 800415e:	b510      	push	{r4, lr}
 8004160:	4604      	mov	r4, r0
 8004162:	e9c0 3300 	strd	r3, r3, [r0]
 8004166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800416a:	6083      	str	r3, [r0, #8]
 800416c:	8181      	strh	r1, [r0, #12]
 800416e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004170:	81c2      	strh	r2, [r0, #14]
 8004172:	6183      	str	r3, [r0, #24]
 8004174:	4619      	mov	r1, r3
 8004176:	2208      	movs	r2, #8
 8004178:	305c      	adds	r0, #92	@ 0x5c
 800417a:	f000 f9f9 	bl	8004570 <memset>
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <std+0x58>)
 8004180:	6263      	str	r3, [r4, #36]	@ 0x24
 8004182:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <std+0x5c>)
 8004184:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <std+0x60>)
 8004188:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <std+0x64>)
 800418c:	6323      	str	r3, [r4, #48]	@ 0x30
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <std+0x68>)
 8004190:	6224      	str	r4, [r4, #32]
 8004192:	429c      	cmp	r4, r3
 8004194:	d006      	beq.n	80041a4 <std+0x48>
 8004196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800419a:	4294      	cmp	r4, r2
 800419c:	d002      	beq.n	80041a4 <std+0x48>
 800419e:	33d0      	adds	r3, #208	@ 0xd0
 80041a0:	429c      	cmp	r4, r3
 80041a2:	d105      	bne.n	80041b0 <std+0x54>
 80041a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ac:	f000 ba58 	b.w	8004660 <__retarget_lock_init_recursive>
 80041b0:	bd10      	pop	{r4, pc}
 80041b2:	bf00      	nop
 80041b4:	080043c1 	.word	0x080043c1
 80041b8:	080043e3 	.word	0x080043e3
 80041bc:	0800441b 	.word	0x0800441b
 80041c0:	0800443f 	.word	0x0800443f
 80041c4:	20000188 	.word	0x20000188

080041c8 <stdio_exit_handler>:
 80041c8:	4a02      	ldr	r2, [pc, #8]	@ (80041d4 <stdio_exit_handler+0xc>)
 80041ca:	4903      	ldr	r1, [pc, #12]	@ (80041d8 <stdio_exit_handler+0x10>)
 80041cc:	4803      	ldr	r0, [pc, #12]	@ (80041dc <stdio_exit_handler+0x14>)
 80041ce:	f000 b869 	b.w	80042a4 <_fwalk_sglue>
 80041d2:	bf00      	nop
 80041d4:	20000014 	.word	0x20000014
 80041d8:	08004efd 	.word	0x08004efd
 80041dc:	20000024 	.word	0x20000024

080041e0 <cleanup_stdio>:
 80041e0:	6841      	ldr	r1, [r0, #4]
 80041e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <cleanup_stdio+0x34>)
 80041e4:	4299      	cmp	r1, r3
 80041e6:	b510      	push	{r4, lr}
 80041e8:	4604      	mov	r4, r0
 80041ea:	d001      	beq.n	80041f0 <cleanup_stdio+0x10>
 80041ec:	f000 fe86 	bl	8004efc <_fflush_r>
 80041f0:	68a1      	ldr	r1, [r4, #8]
 80041f2:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <cleanup_stdio+0x38>)
 80041f4:	4299      	cmp	r1, r3
 80041f6:	d002      	beq.n	80041fe <cleanup_stdio+0x1e>
 80041f8:	4620      	mov	r0, r4
 80041fa:	f000 fe7f 	bl	8004efc <_fflush_r>
 80041fe:	68e1      	ldr	r1, [r4, #12]
 8004200:	4b06      	ldr	r3, [pc, #24]	@ (800421c <cleanup_stdio+0x3c>)
 8004202:	4299      	cmp	r1, r3
 8004204:	d004      	beq.n	8004210 <cleanup_stdio+0x30>
 8004206:	4620      	mov	r0, r4
 8004208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800420c:	f000 be76 	b.w	8004efc <_fflush_r>
 8004210:	bd10      	pop	{r4, pc}
 8004212:	bf00      	nop
 8004214:	20000188 	.word	0x20000188
 8004218:	200001f0 	.word	0x200001f0
 800421c:	20000258 	.word	0x20000258

08004220 <global_stdio_init.part.0>:
 8004220:	b510      	push	{r4, lr}
 8004222:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <global_stdio_init.part.0+0x30>)
 8004224:	4c0b      	ldr	r4, [pc, #44]	@ (8004254 <global_stdio_init.part.0+0x34>)
 8004226:	4a0c      	ldr	r2, [pc, #48]	@ (8004258 <global_stdio_init.part.0+0x38>)
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	4620      	mov	r0, r4
 800422c:	2200      	movs	r2, #0
 800422e:	2104      	movs	r1, #4
 8004230:	f7ff ff94 	bl	800415c <std>
 8004234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004238:	2201      	movs	r2, #1
 800423a:	2109      	movs	r1, #9
 800423c:	f7ff ff8e 	bl	800415c <std>
 8004240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004244:	2202      	movs	r2, #2
 8004246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800424a:	2112      	movs	r1, #18
 800424c:	f7ff bf86 	b.w	800415c <std>
 8004250:	200002c0 	.word	0x200002c0
 8004254:	20000188 	.word	0x20000188
 8004258:	080041c9 	.word	0x080041c9

0800425c <__sfp_lock_acquire>:
 800425c:	4801      	ldr	r0, [pc, #4]	@ (8004264 <__sfp_lock_acquire+0x8>)
 800425e:	f000 ba00 	b.w	8004662 <__retarget_lock_acquire_recursive>
 8004262:	bf00      	nop
 8004264:	200002c9 	.word	0x200002c9

08004268 <__sfp_lock_release>:
 8004268:	4801      	ldr	r0, [pc, #4]	@ (8004270 <__sfp_lock_release+0x8>)
 800426a:	f000 b9fb 	b.w	8004664 <__retarget_lock_release_recursive>
 800426e:	bf00      	nop
 8004270:	200002c9 	.word	0x200002c9

08004274 <__sinit>:
 8004274:	b510      	push	{r4, lr}
 8004276:	4604      	mov	r4, r0
 8004278:	f7ff fff0 	bl	800425c <__sfp_lock_acquire>
 800427c:	6a23      	ldr	r3, [r4, #32]
 800427e:	b11b      	cbz	r3, 8004288 <__sinit+0x14>
 8004280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004284:	f7ff bff0 	b.w	8004268 <__sfp_lock_release>
 8004288:	4b04      	ldr	r3, [pc, #16]	@ (800429c <__sinit+0x28>)
 800428a:	6223      	str	r3, [r4, #32]
 800428c:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <__sinit+0x2c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f5      	bne.n	8004280 <__sinit+0xc>
 8004294:	f7ff ffc4 	bl	8004220 <global_stdio_init.part.0>
 8004298:	e7f2      	b.n	8004280 <__sinit+0xc>
 800429a:	bf00      	nop
 800429c:	080041e1 	.word	0x080041e1
 80042a0:	200002c0 	.word	0x200002c0

080042a4 <_fwalk_sglue>:
 80042a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042a8:	4607      	mov	r7, r0
 80042aa:	4688      	mov	r8, r1
 80042ac:	4614      	mov	r4, r2
 80042ae:	2600      	movs	r6, #0
 80042b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042b4:	f1b9 0901 	subs.w	r9, r9, #1
 80042b8:	d505      	bpl.n	80042c6 <_fwalk_sglue+0x22>
 80042ba:	6824      	ldr	r4, [r4, #0]
 80042bc:	2c00      	cmp	r4, #0
 80042be:	d1f7      	bne.n	80042b0 <_fwalk_sglue+0xc>
 80042c0:	4630      	mov	r0, r6
 80042c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042c6:	89ab      	ldrh	r3, [r5, #12]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d907      	bls.n	80042dc <_fwalk_sglue+0x38>
 80042cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042d0:	3301      	adds	r3, #1
 80042d2:	d003      	beq.n	80042dc <_fwalk_sglue+0x38>
 80042d4:	4629      	mov	r1, r5
 80042d6:	4638      	mov	r0, r7
 80042d8:	47c0      	blx	r8
 80042da:	4306      	orrs	r6, r0
 80042dc:	3568      	adds	r5, #104	@ 0x68
 80042de:	e7e9      	b.n	80042b4 <_fwalk_sglue+0x10>

080042e0 <iprintf>:
 80042e0:	b40f      	push	{r0, r1, r2, r3}
 80042e2:	b507      	push	{r0, r1, r2, lr}
 80042e4:	4906      	ldr	r1, [pc, #24]	@ (8004300 <iprintf+0x20>)
 80042e6:	ab04      	add	r3, sp, #16
 80042e8:	6808      	ldr	r0, [r1, #0]
 80042ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80042ee:	6881      	ldr	r1, [r0, #8]
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	f000 fadb 	bl	80048ac <_vfiprintf_r>
 80042f6:	b003      	add	sp, #12
 80042f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042fc:	b004      	add	sp, #16
 80042fe:	4770      	bx	lr
 8004300:	20000020 	.word	0x20000020

08004304 <_puts_r>:
 8004304:	6a03      	ldr	r3, [r0, #32]
 8004306:	b570      	push	{r4, r5, r6, lr}
 8004308:	6884      	ldr	r4, [r0, #8]
 800430a:	4605      	mov	r5, r0
 800430c:	460e      	mov	r6, r1
 800430e:	b90b      	cbnz	r3, 8004314 <_puts_r+0x10>
 8004310:	f7ff ffb0 	bl	8004274 <__sinit>
 8004314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004316:	07db      	lsls	r3, r3, #31
 8004318:	d405      	bmi.n	8004326 <_puts_r+0x22>
 800431a:	89a3      	ldrh	r3, [r4, #12]
 800431c:	0598      	lsls	r0, r3, #22
 800431e:	d402      	bmi.n	8004326 <_puts_r+0x22>
 8004320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004322:	f000 f99e 	bl	8004662 <__retarget_lock_acquire_recursive>
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	0719      	lsls	r1, r3, #28
 800432a:	d502      	bpl.n	8004332 <_puts_r+0x2e>
 800432c:	6923      	ldr	r3, [r4, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d135      	bne.n	800439e <_puts_r+0x9a>
 8004332:	4621      	mov	r1, r4
 8004334:	4628      	mov	r0, r5
 8004336:	f000 f8c5 	bl	80044c4 <__swsetup_r>
 800433a:	b380      	cbz	r0, 800439e <_puts_r+0x9a>
 800433c:	f04f 35ff 	mov.w	r5, #4294967295
 8004340:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004342:	07da      	lsls	r2, r3, #31
 8004344:	d405      	bmi.n	8004352 <_puts_r+0x4e>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	059b      	lsls	r3, r3, #22
 800434a:	d402      	bmi.n	8004352 <_puts_r+0x4e>
 800434c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800434e:	f000 f989 	bl	8004664 <__retarget_lock_release_recursive>
 8004352:	4628      	mov	r0, r5
 8004354:	bd70      	pop	{r4, r5, r6, pc}
 8004356:	2b00      	cmp	r3, #0
 8004358:	da04      	bge.n	8004364 <_puts_r+0x60>
 800435a:	69a2      	ldr	r2, [r4, #24]
 800435c:	429a      	cmp	r2, r3
 800435e:	dc17      	bgt.n	8004390 <_puts_r+0x8c>
 8004360:	290a      	cmp	r1, #10
 8004362:	d015      	beq.n	8004390 <_puts_r+0x8c>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	6022      	str	r2, [r4, #0]
 800436a:	7019      	strb	r1, [r3, #0]
 800436c:	68a3      	ldr	r3, [r4, #8]
 800436e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004372:	3b01      	subs	r3, #1
 8004374:	60a3      	str	r3, [r4, #8]
 8004376:	2900      	cmp	r1, #0
 8004378:	d1ed      	bne.n	8004356 <_puts_r+0x52>
 800437a:	2b00      	cmp	r3, #0
 800437c:	da11      	bge.n	80043a2 <_puts_r+0x9e>
 800437e:	4622      	mov	r2, r4
 8004380:	210a      	movs	r1, #10
 8004382:	4628      	mov	r0, r5
 8004384:	f000 f85f 	bl	8004446 <__swbuf_r>
 8004388:	3001      	adds	r0, #1
 800438a:	d0d7      	beq.n	800433c <_puts_r+0x38>
 800438c:	250a      	movs	r5, #10
 800438e:	e7d7      	b.n	8004340 <_puts_r+0x3c>
 8004390:	4622      	mov	r2, r4
 8004392:	4628      	mov	r0, r5
 8004394:	f000 f857 	bl	8004446 <__swbuf_r>
 8004398:	3001      	adds	r0, #1
 800439a:	d1e7      	bne.n	800436c <_puts_r+0x68>
 800439c:	e7ce      	b.n	800433c <_puts_r+0x38>
 800439e:	3e01      	subs	r6, #1
 80043a0:	e7e4      	b.n	800436c <_puts_r+0x68>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	6022      	str	r2, [r4, #0]
 80043a8:	220a      	movs	r2, #10
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e7ee      	b.n	800438c <_puts_r+0x88>
	...

080043b0 <puts>:
 80043b0:	4b02      	ldr	r3, [pc, #8]	@ (80043bc <puts+0xc>)
 80043b2:	4601      	mov	r1, r0
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	f7ff bfa5 	b.w	8004304 <_puts_r>
 80043ba:	bf00      	nop
 80043bc:	20000020 	.word	0x20000020

080043c0 <__sread>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	460c      	mov	r4, r1
 80043c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c8:	f000 f8fc 	bl	80045c4 <_read_r>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	bfab      	itete	ge
 80043d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043d2:	89a3      	ldrhlt	r3, [r4, #12]
 80043d4:	181b      	addge	r3, r3, r0
 80043d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043da:	bfac      	ite	ge
 80043dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043de:	81a3      	strhlt	r3, [r4, #12]
 80043e0:	bd10      	pop	{r4, pc}

080043e2 <__swrite>:
 80043e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e6:	461f      	mov	r7, r3
 80043e8:	898b      	ldrh	r3, [r1, #12]
 80043ea:	05db      	lsls	r3, r3, #23
 80043ec:	4605      	mov	r5, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	4616      	mov	r6, r2
 80043f2:	d505      	bpl.n	8004400 <__swrite+0x1e>
 80043f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f8:	2302      	movs	r3, #2
 80043fa:	2200      	movs	r2, #0
 80043fc:	f000 f8d0 	bl	80045a0 <_lseek_r>
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004406:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	4632      	mov	r2, r6
 800440e:	463b      	mov	r3, r7
 8004410:	4628      	mov	r0, r5
 8004412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004416:	f000 b8e7 	b.w	80045e8 <_write_r>

0800441a <__sseek>:
 800441a:	b510      	push	{r4, lr}
 800441c:	460c      	mov	r4, r1
 800441e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004422:	f000 f8bd 	bl	80045a0 <_lseek_r>
 8004426:	1c43      	adds	r3, r0, #1
 8004428:	89a3      	ldrh	r3, [r4, #12]
 800442a:	bf15      	itete	ne
 800442c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800442e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004436:	81a3      	strheq	r3, [r4, #12]
 8004438:	bf18      	it	ne
 800443a:	81a3      	strhne	r3, [r4, #12]
 800443c:	bd10      	pop	{r4, pc}

0800443e <__sclose>:
 800443e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004442:	f000 b89d 	b.w	8004580 <_close_r>

08004446 <__swbuf_r>:
 8004446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004448:	460e      	mov	r6, r1
 800444a:	4614      	mov	r4, r2
 800444c:	4605      	mov	r5, r0
 800444e:	b118      	cbz	r0, 8004458 <__swbuf_r+0x12>
 8004450:	6a03      	ldr	r3, [r0, #32]
 8004452:	b90b      	cbnz	r3, 8004458 <__swbuf_r+0x12>
 8004454:	f7ff ff0e 	bl	8004274 <__sinit>
 8004458:	69a3      	ldr	r3, [r4, #24]
 800445a:	60a3      	str	r3, [r4, #8]
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	071a      	lsls	r2, r3, #28
 8004460:	d501      	bpl.n	8004466 <__swbuf_r+0x20>
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	b943      	cbnz	r3, 8004478 <__swbuf_r+0x32>
 8004466:	4621      	mov	r1, r4
 8004468:	4628      	mov	r0, r5
 800446a:	f000 f82b 	bl	80044c4 <__swsetup_r>
 800446e:	b118      	cbz	r0, 8004478 <__swbuf_r+0x32>
 8004470:	f04f 37ff 	mov.w	r7, #4294967295
 8004474:	4638      	mov	r0, r7
 8004476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	6922      	ldr	r2, [r4, #16]
 800447c:	1a98      	subs	r0, r3, r2
 800447e:	6963      	ldr	r3, [r4, #20]
 8004480:	b2f6      	uxtb	r6, r6
 8004482:	4283      	cmp	r3, r0
 8004484:	4637      	mov	r7, r6
 8004486:	dc05      	bgt.n	8004494 <__swbuf_r+0x4e>
 8004488:	4621      	mov	r1, r4
 800448a:	4628      	mov	r0, r5
 800448c:	f000 fd36 	bl	8004efc <_fflush_r>
 8004490:	2800      	cmp	r0, #0
 8004492:	d1ed      	bne.n	8004470 <__swbuf_r+0x2a>
 8004494:	68a3      	ldr	r3, [r4, #8]
 8004496:	3b01      	subs	r3, #1
 8004498:	60a3      	str	r3, [r4, #8]
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	6022      	str	r2, [r4, #0]
 80044a0:	701e      	strb	r6, [r3, #0]
 80044a2:	6962      	ldr	r2, [r4, #20]
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d004      	beq.n	80044b4 <__swbuf_r+0x6e>
 80044aa:	89a3      	ldrh	r3, [r4, #12]
 80044ac:	07db      	lsls	r3, r3, #31
 80044ae:	d5e1      	bpl.n	8004474 <__swbuf_r+0x2e>
 80044b0:	2e0a      	cmp	r6, #10
 80044b2:	d1df      	bne.n	8004474 <__swbuf_r+0x2e>
 80044b4:	4621      	mov	r1, r4
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 fd20 	bl	8004efc <_fflush_r>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d0d9      	beq.n	8004474 <__swbuf_r+0x2e>
 80044c0:	e7d6      	b.n	8004470 <__swbuf_r+0x2a>
	...

080044c4 <__swsetup_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4b29      	ldr	r3, [pc, #164]	@ (800456c <__swsetup_r+0xa8>)
 80044c8:	4605      	mov	r5, r0
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	460c      	mov	r4, r1
 80044ce:	b118      	cbz	r0, 80044d8 <__swsetup_r+0x14>
 80044d0:	6a03      	ldr	r3, [r0, #32]
 80044d2:	b90b      	cbnz	r3, 80044d8 <__swsetup_r+0x14>
 80044d4:	f7ff fece 	bl	8004274 <__sinit>
 80044d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044dc:	0719      	lsls	r1, r3, #28
 80044de:	d422      	bmi.n	8004526 <__swsetup_r+0x62>
 80044e0:	06da      	lsls	r2, r3, #27
 80044e2:	d407      	bmi.n	80044f4 <__swsetup_r+0x30>
 80044e4:	2209      	movs	r2, #9
 80044e6:	602a      	str	r2, [r5, #0]
 80044e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295
 80044f2:	e033      	b.n	800455c <__swsetup_r+0x98>
 80044f4:	0758      	lsls	r0, r3, #29
 80044f6:	d512      	bpl.n	800451e <__swsetup_r+0x5a>
 80044f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044fa:	b141      	cbz	r1, 800450e <__swsetup_r+0x4a>
 80044fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004500:	4299      	cmp	r1, r3
 8004502:	d002      	beq.n	800450a <__swsetup_r+0x46>
 8004504:	4628      	mov	r0, r5
 8004506:	f000 f8af 	bl	8004668 <_free_r>
 800450a:	2300      	movs	r3, #0
 800450c:	6363      	str	r3, [r4, #52]	@ 0x34
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	2300      	movs	r3, #0
 8004518:	6063      	str	r3, [r4, #4]
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	f043 0308 	orr.w	r3, r3, #8
 8004524:	81a3      	strh	r3, [r4, #12]
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	b94b      	cbnz	r3, 800453e <__swsetup_r+0x7a>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004534:	d003      	beq.n	800453e <__swsetup_r+0x7a>
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f000 fd2d 	bl	8004f98 <__smakebuf_r>
 800453e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004542:	f013 0201 	ands.w	r2, r3, #1
 8004546:	d00a      	beq.n	800455e <__swsetup_r+0x9a>
 8004548:	2200      	movs	r2, #0
 800454a:	60a2      	str	r2, [r4, #8]
 800454c:	6962      	ldr	r2, [r4, #20]
 800454e:	4252      	negs	r2, r2
 8004550:	61a2      	str	r2, [r4, #24]
 8004552:	6922      	ldr	r2, [r4, #16]
 8004554:	b942      	cbnz	r2, 8004568 <__swsetup_r+0xa4>
 8004556:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800455a:	d1c5      	bne.n	80044e8 <__swsetup_r+0x24>
 800455c:	bd38      	pop	{r3, r4, r5, pc}
 800455e:	0799      	lsls	r1, r3, #30
 8004560:	bf58      	it	pl
 8004562:	6962      	ldrpl	r2, [r4, #20]
 8004564:	60a2      	str	r2, [r4, #8]
 8004566:	e7f4      	b.n	8004552 <__swsetup_r+0x8e>
 8004568:	2000      	movs	r0, #0
 800456a:	e7f7      	b.n	800455c <__swsetup_r+0x98>
 800456c:	20000020 	.word	0x20000020

08004570 <memset>:
 8004570:	4402      	add	r2, r0
 8004572:	4603      	mov	r3, r0
 8004574:	4293      	cmp	r3, r2
 8004576:	d100      	bne.n	800457a <memset+0xa>
 8004578:	4770      	bx	lr
 800457a:	f803 1b01 	strb.w	r1, [r3], #1
 800457e:	e7f9      	b.n	8004574 <memset+0x4>

08004580 <_close_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d06      	ldr	r5, [pc, #24]	@ (800459c <_close_r+0x1c>)
 8004584:	2300      	movs	r3, #0
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	602b      	str	r3, [r5, #0]
 800458c:	f7fc fd43 	bl	8001016 <_close>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_close_r+0x1a>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_close_r+0x1a>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	200002c4 	.word	0x200002c4

080045a0 <_lseek_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4d07      	ldr	r5, [pc, #28]	@ (80045c0 <_lseek_r+0x20>)
 80045a4:	4604      	mov	r4, r0
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fc fd58 	bl	8001064 <_lseek>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_lseek_r+0x1e>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_lseek_r+0x1e>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	200002c4 	.word	0x200002c4

080045c4 <_read_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d07      	ldr	r5, [pc, #28]	@ (80045e4 <_read_r+0x20>)
 80045c8:	4604      	mov	r4, r0
 80045ca:	4608      	mov	r0, r1
 80045cc:	4611      	mov	r1, r2
 80045ce:	2200      	movs	r2, #0
 80045d0:	602a      	str	r2, [r5, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7fc fce6 	bl	8000fa4 <_read>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_read_r+0x1e>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_read_r+0x1e>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	200002c4 	.word	0x200002c4

080045e8 <_write_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d07      	ldr	r5, [pc, #28]	@ (8004608 <_write_r+0x20>)
 80045ec:	4604      	mov	r4, r0
 80045ee:	4608      	mov	r0, r1
 80045f0:	4611      	mov	r1, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fc fcf1 	bl	8000fde <_write>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_write_r+0x1e>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_write_r+0x1e>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	200002c4 	.word	0x200002c4

0800460c <__errno>:
 800460c:	4b01      	ldr	r3, [pc, #4]	@ (8004614 <__errno+0x8>)
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000020 	.word	0x20000020

08004618 <__libc_init_array>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4d0d      	ldr	r5, [pc, #52]	@ (8004650 <__libc_init_array+0x38>)
 800461c:	4c0d      	ldr	r4, [pc, #52]	@ (8004654 <__libc_init_array+0x3c>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	2600      	movs	r6, #0
 8004624:	42a6      	cmp	r6, r4
 8004626:	d109      	bne.n	800463c <__libc_init_array+0x24>
 8004628:	4d0b      	ldr	r5, [pc, #44]	@ (8004658 <__libc_init_array+0x40>)
 800462a:	4c0c      	ldr	r4, [pc, #48]	@ (800465c <__libc_init_array+0x44>)
 800462c:	f000 fd22 	bl	8005074 <_init>
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	2600      	movs	r6, #0
 8004636:	42a6      	cmp	r6, r4
 8004638:	d105      	bne.n	8004646 <__libc_init_array+0x2e>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004640:	4798      	blx	r3
 8004642:	3601      	adds	r6, #1
 8004644:	e7ee      	b.n	8004624 <__libc_init_array+0xc>
 8004646:	f855 3b04 	ldr.w	r3, [r5], #4
 800464a:	4798      	blx	r3
 800464c:	3601      	adds	r6, #1
 800464e:	e7f2      	b.n	8004636 <__libc_init_array+0x1e>
 8004650:	0800510c 	.word	0x0800510c
 8004654:	0800510c 	.word	0x0800510c
 8004658:	0800510c 	.word	0x0800510c
 800465c:	08005110 	.word	0x08005110

08004660 <__retarget_lock_init_recursive>:
 8004660:	4770      	bx	lr

08004662 <__retarget_lock_acquire_recursive>:
 8004662:	4770      	bx	lr

08004664 <__retarget_lock_release_recursive>:
 8004664:	4770      	bx	lr
	...

08004668 <_free_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4605      	mov	r5, r0
 800466c:	2900      	cmp	r1, #0
 800466e:	d041      	beq.n	80046f4 <_free_r+0x8c>
 8004670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004674:	1f0c      	subs	r4, r1, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	bfb8      	it	lt
 800467a:	18e4      	addlt	r4, r4, r3
 800467c:	f000 f8e0 	bl	8004840 <__malloc_lock>
 8004680:	4a1d      	ldr	r2, [pc, #116]	@ (80046f8 <_free_r+0x90>)
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	b933      	cbnz	r3, 8004694 <_free_r+0x2c>
 8004686:	6063      	str	r3, [r4, #4]
 8004688:	6014      	str	r4, [r2, #0]
 800468a:	4628      	mov	r0, r5
 800468c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004690:	f000 b8dc 	b.w	800484c <__malloc_unlock>
 8004694:	42a3      	cmp	r3, r4
 8004696:	d908      	bls.n	80046aa <_free_r+0x42>
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	1821      	adds	r1, r4, r0
 800469c:	428b      	cmp	r3, r1
 800469e:	bf01      	itttt	eq
 80046a0:	6819      	ldreq	r1, [r3, #0]
 80046a2:	685b      	ldreq	r3, [r3, #4]
 80046a4:	1809      	addeq	r1, r1, r0
 80046a6:	6021      	streq	r1, [r4, #0]
 80046a8:	e7ed      	b.n	8004686 <_free_r+0x1e>
 80046aa:	461a      	mov	r2, r3
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b10b      	cbz	r3, 80046b4 <_free_r+0x4c>
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	d9fa      	bls.n	80046aa <_free_r+0x42>
 80046b4:	6811      	ldr	r1, [r2, #0]
 80046b6:	1850      	adds	r0, r2, r1
 80046b8:	42a0      	cmp	r0, r4
 80046ba:	d10b      	bne.n	80046d4 <_free_r+0x6c>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	4401      	add	r1, r0
 80046c0:	1850      	adds	r0, r2, r1
 80046c2:	4283      	cmp	r3, r0
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	d1e0      	bne.n	800468a <_free_r+0x22>
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	6053      	str	r3, [r2, #4]
 80046ce:	4408      	add	r0, r1
 80046d0:	6010      	str	r0, [r2, #0]
 80046d2:	e7da      	b.n	800468a <_free_r+0x22>
 80046d4:	d902      	bls.n	80046dc <_free_r+0x74>
 80046d6:	230c      	movs	r3, #12
 80046d8:	602b      	str	r3, [r5, #0]
 80046da:	e7d6      	b.n	800468a <_free_r+0x22>
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	1821      	adds	r1, r4, r0
 80046e0:	428b      	cmp	r3, r1
 80046e2:	bf04      	itt	eq
 80046e4:	6819      	ldreq	r1, [r3, #0]
 80046e6:	685b      	ldreq	r3, [r3, #4]
 80046e8:	6063      	str	r3, [r4, #4]
 80046ea:	bf04      	itt	eq
 80046ec:	1809      	addeq	r1, r1, r0
 80046ee:	6021      	streq	r1, [r4, #0]
 80046f0:	6054      	str	r4, [r2, #4]
 80046f2:	e7ca      	b.n	800468a <_free_r+0x22>
 80046f4:	bd38      	pop	{r3, r4, r5, pc}
 80046f6:	bf00      	nop
 80046f8:	200002d0 	.word	0x200002d0

080046fc <sbrk_aligned>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	4e0f      	ldr	r6, [pc, #60]	@ (800473c <sbrk_aligned+0x40>)
 8004700:	460c      	mov	r4, r1
 8004702:	6831      	ldr	r1, [r6, #0]
 8004704:	4605      	mov	r5, r0
 8004706:	b911      	cbnz	r1, 800470e <sbrk_aligned+0x12>
 8004708:	f000 fca4 	bl	8005054 <_sbrk_r>
 800470c:	6030      	str	r0, [r6, #0]
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 fc9f 	bl	8005054 <_sbrk_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	d103      	bne.n	8004722 <sbrk_aligned+0x26>
 800471a:	f04f 34ff 	mov.w	r4, #4294967295
 800471e:	4620      	mov	r0, r4
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	1cc4      	adds	r4, r0, #3
 8004724:	f024 0403 	bic.w	r4, r4, #3
 8004728:	42a0      	cmp	r0, r4
 800472a:	d0f8      	beq.n	800471e <sbrk_aligned+0x22>
 800472c:	1a21      	subs	r1, r4, r0
 800472e:	4628      	mov	r0, r5
 8004730:	f000 fc90 	bl	8005054 <_sbrk_r>
 8004734:	3001      	adds	r0, #1
 8004736:	d1f2      	bne.n	800471e <sbrk_aligned+0x22>
 8004738:	e7ef      	b.n	800471a <sbrk_aligned+0x1e>
 800473a:	bf00      	nop
 800473c:	200002cc 	.word	0x200002cc

08004740 <_malloc_r>:
 8004740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004744:	1ccd      	adds	r5, r1, #3
 8004746:	f025 0503 	bic.w	r5, r5, #3
 800474a:	3508      	adds	r5, #8
 800474c:	2d0c      	cmp	r5, #12
 800474e:	bf38      	it	cc
 8004750:	250c      	movcc	r5, #12
 8004752:	2d00      	cmp	r5, #0
 8004754:	4606      	mov	r6, r0
 8004756:	db01      	blt.n	800475c <_malloc_r+0x1c>
 8004758:	42a9      	cmp	r1, r5
 800475a:	d904      	bls.n	8004766 <_malloc_r+0x26>
 800475c:	230c      	movs	r3, #12
 800475e:	6033      	str	r3, [r6, #0]
 8004760:	2000      	movs	r0, #0
 8004762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004766:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800483c <_malloc_r+0xfc>
 800476a:	f000 f869 	bl	8004840 <__malloc_lock>
 800476e:	f8d8 3000 	ldr.w	r3, [r8]
 8004772:	461c      	mov	r4, r3
 8004774:	bb44      	cbnz	r4, 80047c8 <_malloc_r+0x88>
 8004776:	4629      	mov	r1, r5
 8004778:	4630      	mov	r0, r6
 800477a:	f7ff ffbf 	bl	80046fc <sbrk_aligned>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	4604      	mov	r4, r0
 8004782:	d158      	bne.n	8004836 <_malloc_r+0xf6>
 8004784:	f8d8 4000 	ldr.w	r4, [r8]
 8004788:	4627      	mov	r7, r4
 800478a:	2f00      	cmp	r7, #0
 800478c:	d143      	bne.n	8004816 <_malloc_r+0xd6>
 800478e:	2c00      	cmp	r4, #0
 8004790:	d04b      	beq.n	800482a <_malloc_r+0xea>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	4639      	mov	r1, r7
 8004796:	4630      	mov	r0, r6
 8004798:	eb04 0903 	add.w	r9, r4, r3
 800479c:	f000 fc5a 	bl	8005054 <_sbrk_r>
 80047a0:	4581      	cmp	r9, r0
 80047a2:	d142      	bne.n	800482a <_malloc_r+0xea>
 80047a4:	6821      	ldr	r1, [r4, #0]
 80047a6:	1a6d      	subs	r5, r5, r1
 80047a8:	4629      	mov	r1, r5
 80047aa:	4630      	mov	r0, r6
 80047ac:	f7ff ffa6 	bl	80046fc <sbrk_aligned>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d03a      	beq.n	800482a <_malloc_r+0xea>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	442b      	add	r3, r5
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	f8d8 3000 	ldr.w	r3, [r8]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	bb62      	cbnz	r2, 800481c <_malloc_r+0xdc>
 80047c2:	f8c8 7000 	str.w	r7, [r8]
 80047c6:	e00f      	b.n	80047e8 <_malloc_r+0xa8>
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	1b52      	subs	r2, r2, r5
 80047cc:	d420      	bmi.n	8004810 <_malloc_r+0xd0>
 80047ce:	2a0b      	cmp	r2, #11
 80047d0:	d917      	bls.n	8004802 <_malloc_r+0xc2>
 80047d2:	1961      	adds	r1, r4, r5
 80047d4:	42a3      	cmp	r3, r4
 80047d6:	6025      	str	r5, [r4, #0]
 80047d8:	bf18      	it	ne
 80047da:	6059      	strne	r1, [r3, #4]
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	bf08      	it	eq
 80047e0:	f8c8 1000 	streq.w	r1, [r8]
 80047e4:	5162      	str	r2, [r4, r5]
 80047e6:	604b      	str	r3, [r1, #4]
 80047e8:	4630      	mov	r0, r6
 80047ea:	f000 f82f 	bl	800484c <__malloc_unlock>
 80047ee:	f104 000b 	add.w	r0, r4, #11
 80047f2:	1d23      	adds	r3, r4, #4
 80047f4:	f020 0007 	bic.w	r0, r0, #7
 80047f8:	1ac2      	subs	r2, r0, r3
 80047fa:	bf1c      	itt	ne
 80047fc:	1a1b      	subne	r3, r3, r0
 80047fe:	50a3      	strne	r3, [r4, r2]
 8004800:	e7af      	b.n	8004762 <_malloc_r+0x22>
 8004802:	6862      	ldr	r2, [r4, #4]
 8004804:	42a3      	cmp	r3, r4
 8004806:	bf0c      	ite	eq
 8004808:	f8c8 2000 	streq.w	r2, [r8]
 800480c:	605a      	strne	r2, [r3, #4]
 800480e:	e7eb      	b.n	80047e8 <_malloc_r+0xa8>
 8004810:	4623      	mov	r3, r4
 8004812:	6864      	ldr	r4, [r4, #4]
 8004814:	e7ae      	b.n	8004774 <_malloc_r+0x34>
 8004816:	463c      	mov	r4, r7
 8004818:	687f      	ldr	r7, [r7, #4]
 800481a:	e7b6      	b.n	800478a <_malloc_r+0x4a>
 800481c:	461a      	mov	r2, r3
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	42a3      	cmp	r3, r4
 8004822:	d1fb      	bne.n	800481c <_malloc_r+0xdc>
 8004824:	2300      	movs	r3, #0
 8004826:	6053      	str	r3, [r2, #4]
 8004828:	e7de      	b.n	80047e8 <_malloc_r+0xa8>
 800482a:	230c      	movs	r3, #12
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	4630      	mov	r0, r6
 8004830:	f000 f80c 	bl	800484c <__malloc_unlock>
 8004834:	e794      	b.n	8004760 <_malloc_r+0x20>
 8004836:	6005      	str	r5, [r0, #0]
 8004838:	e7d6      	b.n	80047e8 <_malloc_r+0xa8>
 800483a:	bf00      	nop
 800483c:	200002d0 	.word	0x200002d0

08004840 <__malloc_lock>:
 8004840:	4801      	ldr	r0, [pc, #4]	@ (8004848 <__malloc_lock+0x8>)
 8004842:	f7ff bf0e 	b.w	8004662 <__retarget_lock_acquire_recursive>
 8004846:	bf00      	nop
 8004848:	200002c8 	.word	0x200002c8

0800484c <__malloc_unlock>:
 800484c:	4801      	ldr	r0, [pc, #4]	@ (8004854 <__malloc_unlock+0x8>)
 800484e:	f7ff bf09 	b.w	8004664 <__retarget_lock_release_recursive>
 8004852:	bf00      	nop
 8004854:	200002c8 	.word	0x200002c8

08004858 <__sfputc_r>:
 8004858:	6893      	ldr	r3, [r2, #8]
 800485a:	3b01      	subs	r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	b410      	push	{r4}
 8004860:	6093      	str	r3, [r2, #8]
 8004862:	da08      	bge.n	8004876 <__sfputc_r+0x1e>
 8004864:	6994      	ldr	r4, [r2, #24]
 8004866:	42a3      	cmp	r3, r4
 8004868:	db01      	blt.n	800486e <__sfputc_r+0x16>
 800486a:	290a      	cmp	r1, #10
 800486c:	d103      	bne.n	8004876 <__sfputc_r+0x1e>
 800486e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004872:	f7ff bde8 	b.w	8004446 <__swbuf_r>
 8004876:	6813      	ldr	r3, [r2, #0]
 8004878:	1c58      	adds	r0, r3, #1
 800487a:	6010      	str	r0, [r2, #0]
 800487c:	7019      	strb	r1, [r3, #0]
 800487e:	4608      	mov	r0, r1
 8004880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004884:	4770      	bx	lr

08004886 <__sfputs_r>:
 8004886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004888:	4606      	mov	r6, r0
 800488a:	460f      	mov	r7, r1
 800488c:	4614      	mov	r4, r2
 800488e:	18d5      	adds	r5, r2, r3
 8004890:	42ac      	cmp	r4, r5
 8004892:	d101      	bne.n	8004898 <__sfputs_r+0x12>
 8004894:	2000      	movs	r0, #0
 8004896:	e007      	b.n	80048a8 <__sfputs_r+0x22>
 8004898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489c:	463a      	mov	r2, r7
 800489e:	4630      	mov	r0, r6
 80048a0:	f7ff ffda 	bl	8004858 <__sfputc_r>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d1f3      	bne.n	8004890 <__sfputs_r+0xa>
 80048a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048ac <_vfiprintf_r>:
 80048ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	460d      	mov	r5, r1
 80048b2:	b09d      	sub	sp, #116	@ 0x74
 80048b4:	4614      	mov	r4, r2
 80048b6:	4698      	mov	r8, r3
 80048b8:	4606      	mov	r6, r0
 80048ba:	b118      	cbz	r0, 80048c4 <_vfiprintf_r+0x18>
 80048bc:	6a03      	ldr	r3, [r0, #32]
 80048be:	b90b      	cbnz	r3, 80048c4 <_vfiprintf_r+0x18>
 80048c0:	f7ff fcd8 	bl	8004274 <__sinit>
 80048c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	d405      	bmi.n	80048d6 <_vfiprintf_r+0x2a>
 80048ca:	89ab      	ldrh	r3, [r5, #12]
 80048cc:	059a      	lsls	r2, r3, #22
 80048ce:	d402      	bmi.n	80048d6 <_vfiprintf_r+0x2a>
 80048d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048d2:	f7ff fec6 	bl	8004662 <__retarget_lock_acquire_recursive>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	d501      	bpl.n	80048e0 <_vfiprintf_r+0x34>
 80048dc:	692b      	ldr	r3, [r5, #16]
 80048de:	b99b      	cbnz	r3, 8004908 <_vfiprintf_r+0x5c>
 80048e0:	4629      	mov	r1, r5
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7ff fdee 	bl	80044c4 <__swsetup_r>
 80048e8:	b170      	cbz	r0, 8004908 <_vfiprintf_r+0x5c>
 80048ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048ec:	07dc      	lsls	r4, r3, #31
 80048ee:	d504      	bpl.n	80048fa <_vfiprintf_r+0x4e>
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	b01d      	add	sp, #116	@ 0x74
 80048f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048fa:	89ab      	ldrh	r3, [r5, #12]
 80048fc:	0598      	lsls	r0, r3, #22
 80048fe:	d4f7      	bmi.n	80048f0 <_vfiprintf_r+0x44>
 8004900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004902:	f7ff feaf 	bl	8004664 <__retarget_lock_release_recursive>
 8004906:	e7f3      	b.n	80048f0 <_vfiprintf_r+0x44>
 8004908:	2300      	movs	r3, #0
 800490a:	9309      	str	r3, [sp, #36]	@ 0x24
 800490c:	2320      	movs	r3, #32
 800490e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004912:	f8cd 800c 	str.w	r8, [sp, #12]
 8004916:	2330      	movs	r3, #48	@ 0x30
 8004918:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ac8 <_vfiprintf_r+0x21c>
 800491c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004920:	f04f 0901 	mov.w	r9, #1
 8004924:	4623      	mov	r3, r4
 8004926:	469a      	mov	sl, r3
 8004928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800492c:	b10a      	cbz	r2, 8004932 <_vfiprintf_r+0x86>
 800492e:	2a25      	cmp	r2, #37	@ 0x25
 8004930:	d1f9      	bne.n	8004926 <_vfiprintf_r+0x7a>
 8004932:	ebba 0b04 	subs.w	fp, sl, r4
 8004936:	d00b      	beq.n	8004950 <_vfiprintf_r+0xa4>
 8004938:	465b      	mov	r3, fp
 800493a:	4622      	mov	r2, r4
 800493c:	4629      	mov	r1, r5
 800493e:	4630      	mov	r0, r6
 8004940:	f7ff ffa1 	bl	8004886 <__sfputs_r>
 8004944:	3001      	adds	r0, #1
 8004946:	f000 80a7 	beq.w	8004a98 <_vfiprintf_r+0x1ec>
 800494a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800494c:	445a      	add	r2, fp
 800494e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004950:	f89a 3000 	ldrb.w	r3, [sl]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 809f 	beq.w	8004a98 <_vfiprintf_r+0x1ec>
 800495a:	2300      	movs	r3, #0
 800495c:	f04f 32ff 	mov.w	r2, #4294967295
 8004960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004964:	f10a 0a01 	add.w	sl, sl, #1
 8004968:	9304      	str	r3, [sp, #16]
 800496a:	9307      	str	r3, [sp, #28]
 800496c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004970:	931a      	str	r3, [sp, #104]	@ 0x68
 8004972:	4654      	mov	r4, sl
 8004974:	2205      	movs	r2, #5
 8004976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497a:	4853      	ldr	r0, [pc, #332]	@ (8004ac8 <_vfiprintf_r+0x21c>)
 800497c:	f7fb fc30 	bl	80001e0 <memchr>
 8004980:	9a04      	ldr	r2, [sp, #16]
 8004982:	b9d8      	cbnz	r0, 80049bc <_vfiprintf_r+0x110>
 8004984:	06d1      	lsls	r1, r2, #27
 8004986:	bf44      	itt	mi
 8004988:	2320      	movmi	r3, #32
 800498a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800498e:	0713      	lsls	r3, r2, #28
 8004990:	bf44      	itt	mi
 8004992:	232b      	movmi	r3, #43	@ 0x2b
 8004994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004998:	f89a 3000 	ldrb.w	r3, [sl]
 800499c:	2b2a      	cmp	r3, #42	@ 0x2a
 800499e:	d015      	beq.n	80049cc <_vfiprintf_r+0x120>
 80049a0:	9a07      	ldr	r2, [sp, #28]
 80049a2:	4654      	mov	r4, sl
 80049a4:	2000      	movs	r0, #0
 80049a6:	f04f 0c0a 	mov.w	ip, #10
 80049aa:	4621      	mov	r1, r4
 80049ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b0:	3b30      	subs	r3, #48	@ 0x30
 80049b2:	2b09      	cmp	r3, #9
 80049b4:	d94b      	bls.n	8004a4e <_vfiprintf_r+0x1a2>
 80049b6:	b1b0      	cbz	r0, 80049e6 <_vfiprintf_r+0x13a>
 80049b8:	9207      	str	r2, [sp, #28]
 80049ba:	e014      	b.n	80049e6 <_vfiprintf_r+0x13a>
 80049bc:	eba0 0308 	sub.w	r3, r0, r8
 80049c0:	fa09 f303 	lsl.w	r3, r9, r3
 80049c4:	4313      	orrs	r3, r2
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	46a2      	mov	sl, r4
 80049ca:	e7d2      	b.n	8004972 <_vfiprintf_r+0xc6>
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	1d19      	adds	r1, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	9103      	str	r1, [sp, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bfbb      	ittet	lt
 80049d8:	425b      	neglt	r3, r3
 80049da:	f042 0202 	orrlt.w	r2, r2, #2
 80049de:	9307      	strge	r3, [sp, #28]
 80049e0:	9307      	strlt	r3, [sp, #28]
 80049e2:	bfb8      	it	lt
 80049e4:	9204      	strlt	r2, [sp, #16]
 80049e6:	7823      	ldrb	r3, [r4, #0]
 80049e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80049ea:	d10a      	bne.n	8004a02 <_vfiprintf_r+0x156>
 80049ec:	7863      	ldrb	r3, [r4, #1]
 80049ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80049f0:	d132      	bne.n	8004a58 <_vfiprintf_r+0x1ac>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	1d1a      	adds	r2, r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	9203      	str	r2, [sp, #12]
 80049fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049fe:	3402      	adds	r4, #2
 8004a00:	9305      	str	r3, [sp, #20]
 8004a02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ad8 <_vfiprintf_r+0x22c>
 8004a06:	7821      	ldrb	r1, [r4, #0]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	4650      	mov	r0, sl
 8004a0c:	f7fb fbe8 	bl	80001e0 <memchr>
 8004a10:	b138      	cbz	r0, 8004a22 <_vfiprintf_r+0x176>
 8004a12:	9b04      	ldr	r3, [sp, #16]
 8004a14:	eba0 000a 	sub.w	r0, r0, sl
 8004a18:	2240      	movs	r2, #64	@ 0x40
 8004a1a:	4082      	lsls	r2, r0
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	3401      	adds	r4, #1
 8004a20:	9304      	str	r3, [sp, #16]
 8004a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a26:	4829      	ldr	r0, [pc, #164]	@ (8004acc <_vfiprintf_r+0x220>)
 8004a28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a2c:	2206      	movs	r2, #6
 8004a2e:	f7fb fbd7 	bl	80001e0 <memchr>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d03f      	beq.n	8004ab6 <_vfiprintf_r+0x20a>
 8004a36:	4b26      	ldr	r3, [pc, #152]	@ (8004ad0 <_vfiprintf_r+0x224>)
 8004a38:	bb1b      	cbnz	r3, 8004a82 <_vfiprintf_r+0x1d6>
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	3307      	adds	r3, #7
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	3308      	adds	r3, #8
 8004a44:	9303      	str	r3, [sp, #12]
 8004a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a48:	443b      	add	r3, r7
 8004a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a4c:	e76a      	b.n	8004924 <_vfiprintf_r+0x78>
 8004a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a52:	460c      	mov	r4, r1
 8004a54:	2001      	movs	r0, #1
 8004a56:	e7a8      	b.n	80049aa <_vfiprintf_r+0xfe>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	3401      	adds	r4, #1
 8004a5c:	9305      	str	r3, [sp, #20]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f04f 0c0a 	mov.w	ip, #10
 8004a64:	4620      	mov	r0, r4
 8004a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a6a:	3a30      	subs	r2, #48	@ 0x30
 8004a6c:	2a09      	cmp	r2, #9
 8004a6e:	d903      	bls.n	8004a78 <_vfiprintf_r+0x1cc>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0c6      	beq.n	8004a02 <_vfiprintf_r+0x156>
 8004a74:	9105      	str	r1, [sp, #20]
 8004a76:	e7c4      	b.n	8004a02 <_vfiprintf_r+0x156>
 8004a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e7f0      	b.n	8004a64 <_vfiprintf_r+0x1b8>
 8004a82:	ab03      	add	r3, sp, #12
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	462a      	mov	r2, r5
 8004a88:	4b12      	ldr	r3, [pc, #72]	@ (8004ad4 <_vfiprintf_r+0x228>)
 8004a8a:	a904      	add	r1, sp, #16
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f3af 8000 	nop.w
 8004a92:	4607      	mov	r7, r0
 8004a94:	1c78      	adds	r0, r7, #1
 8004a96:	d1d6      	bne.n	8004a46 <_vfiprintf_r+0x19a>
 8004a98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a9a:	07d9      	lsls	r1, r3, #31
 8004a9c:	d405      	bmi.n	8004aaa <_vfiprintf_r+0x1fe>
 8004a9e:	89ab      	ldrh	r3, [r5, #12]
 8004aa0:	059a      	lsls	r2, r3, #22
 8004aa2:	d402      	bmi.n	8004aaa <_vfiprintf_r+0x1fe>
 8004aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aa6:	f7ff fddd 	bl	8004664 <__retarget_lock_release_recursive>
 8004aaa:	89ab      	ldrh	r3, [r5, #12]
 8004aac:	065b      	lsls	r3, r3, #25
 8004aae:	f53f af1f 	bmi.w	80048f0 <_vfiprintf_r+0x44>
 8004ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ab4:	e71e      	b.n	80048f4 <_vfiprintf_r+0x48>
 8004ab6:	ab03      	add	r3, sp, #12
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	462a      	mov	r2, r5
 8004abc:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <_vfiprintf_r+0x228>)
 8004abe:	a904      	add	r1, sp, #16
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f000 f879 	bl	8004bb8 <_printf_i>
 8004ac6:	e7e4      	b.n	8004a92 <_vfiprintf_r+0x1e6>
 8004ac8:	080050d0 	.word	0x080050d0
 8004acc:	080050da 	.word	0x080050da
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	08004887 	.word	0x08004887
 8004ad8:	080050d6 	.word	0x080050d6

08004adc <_printf_common>:
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	4698      	mov	r8, r3
 8004ae4:	688a      	ldr	r2, [r1, #8]
 8004ae6:	690b      	ldr	r3, [r1, #16]
 8004ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	bfb8      	it	lt
 8004af0:	4613      	movlt	r3, r2
 8004af2:	6033      	str	r3, [r6, #0]
 8004af4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004af8:	4607      	mov	r7, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	b10a      	cbz	r2, 8004b02 <_printf_common+0x26>
 8004afe:	3301      	adds	r3, #1
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	0699      	lsls	r1, r3, #26
 8004b06:	bf42      	ittt	mi
 8004b08:	6833      	ldrmi	r3, [r6, #0]
 8004b0a:	3302      	addmi	r3, #2
 8004b0c:	6033      	strmi	r3, [r6, #0]
 8004b0e:	6825      	ldr	r5, [r4, #0]
 8004b10:	f015 0506 	ands.w	r5, r5, #6
 8004b14:	d106      	bne.n	8004b24 <_printf_common+0x48>
 8004b16:	f104 0a19 	add.w	sl, r4, #25
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	6832      	ldr	r2, [r6, #0]
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	dc26      	bgt.n	8004b72 <_printf_common+0x96>
 8004b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	3b00      	subs	r3, #0
 8004b2c:	bf18      	it	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	0692      	lsls	r2, r2, #26
 8004b32:	d42b      	bmi.n	8004b8c <_printf_common+0xb0>
 8004b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b38:	4641      	mov	r1, r8
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	47c8      	blx	r9
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d01e      	beq.n	8004b80 <_printf_common+0xa4>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	6922      	ldr	r2, [r4, #16]
 8004b46:	f003 0306 	and.w	r3, r3, #6
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	bf02      	ittt	eq
 8004b4e:	68e5      	ldreq	r5, [r4, #12]
 8004b50:	6833      	ldreq	r3, [r6, #0]
 8004b52:	1aed      	subeq	r5, r5, r3
 8004b54:	68a3      	ldr	r3, [r4, #8]
 8004b56:	bf0c      	ite	eq
 8004b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b5c:	2500      	movne	r5, #0
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bfc4      	itt	gt
 8004b62:	1a9b      	subgt	r3, r3, r2
 8004b64:	18ed      	addgt	r5, r5, r3
 8004b66:	2600      	movs	r6, #0
 8004b68:	341a      	adds	r4, #26
 8004b6a:	42b5      	cmp	r5, r6
 8004b6c:	d11a      	bne.n	8004ba4 <_printf_common+0xc8>
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e008      	b.n	8004b84 <_printf_common+0xa8>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4652      	mov	r2, sl
 8004b76:	4641      	mov	r1, r8
 8004b78:	4638      	mov	r0, r7
 8004b7a:	47c8      	blx	r9
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d103      	bne.n	8004b88 <_printf_common+0xac>
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b88:	3501      	adds	r5, #1
 8004b8a:	e7c6      	b.n	8004b1a <_printf_common+0x3e>
 8004b8c:	18e1      	adds	r1, r4, r3
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	2030      	movs	r0, #48	@ 0x30
 8004b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b96:	4422      	add	r2, r4
 8004b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	e7c7      	b.n	8004b34 <_printf_common+0x58>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	4641      	mov	r1, r8
 8004baa:	4638      	mov	r0, r7
 8004bac:	47c8      	blx	r9
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d0e6      	beq.n	8004b80 <_printf_common+0xa4>
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7d9      	b.n	8004b6a <_printf_common+0x8e>
	...

08004bb8 <_printf_i>:
 8004bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	7e0f      	ldrb	r7, [r1, #24]
 8004bbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bc0:	2f78      	cmp	r7, #120	@ 0x78
 8004bc2:	4691      	mov	r9, r2
 8004bc4:	4680      	mov	r8, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	469a      	mov	sl, r3
 8004bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bce:	d807      	bhi.n	8004be0 <_printf_i+0x28>
 8004bd0:	2f62      	cmp	r7, #98	@ 0x62
 8004bd2:	d80a      	bhi.n	8004bea <_printf_i+0x32>
 8004bd4:	2f00      	cmp	r7, #0
 8004bd6:	f000 80d1 	beq.w	8004d7c <_printf_i+0x1c4>
 8004bda:	2f58      	cmp	r7, #88	@ 0x58
 8004bdc:	f000 80b8 	beq.w	8004d50 <_printf_i+0x198>
 8004be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004be8:	e03a      	b.n	8004c60 <_printf_i+0xa8>
 8004bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bee:	2b15      	cmp	r3, #21
 8004bf0:	d8f6      	bhi.n	8004be0 <_printf_i+0x28>
 8004bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8004bf8 <_printf_i+0x40>)
 8004bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bf8:	08004c51 	.word	0x08004c51
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004be1 	.word	0x08004be1
 8004c04:	08004be1 	.word	0x08004be1
 8004c08:	08004be1 	.word	0x08004be1
 8004c0c:	08004be1 	.word	0x08004be1
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004be1 	.word	0x08004be1
 8004c18:	08004be1 	.word	0x08004be1
 8004c1c:	08004be1 	.word	0x08004be1
 8004c20:	08004be1 	.word	0x08004be1
 8004c24:	08004d63 	.word	0x08004d63
 8004c28:	08004c8f 	.word	0x08004c8f
 8004c2c:	08004d1d 	.word	0x08004d1d
 8004c30:	08004be1 	.word	0x08004be1
 8004c34:	08004be1 	.word	0x08004be1
 8004c38:	08004d85 	.word	0x08004d85
 8004c3c:	08004be1 	.word	0x08004be1
 8004c40:	08004c8f 	.word	0x08004c8f
 8004c44:	08004be1 	.word	0x08004be1
 8004c48:	08004be1 	.word	0x08004be1
 8004c4c:	08004d25 	.word	0x08004d25
 8004c50:	6833      	ldr	r3, [r6, #0]
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6032      	str	r2, [r6, #0]
 8004c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c60:	2301      	movs	r3, #1
 8004c62:	e09c      	b.n	8004d9e <_printf_i+0x1e6>
 8004c64:	6833      	ldr	r3, [r6, #0]
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	1d19      	adds	r1, r3, #4
 8004c6a:	6031      	str	r1, [r6, #0]
 8004c6c:	0606      	lsls	r6, r0, #24
 8004c6e:	d501      	bpl.n	8004c74 <_printf_i+0xbc>
 8004c70:	681d      	ldr	r5, [r3, #0]
 8004c72:	e003      	b.n	8004c7c <_printf_i+0xc4>
 8004c74:	0645      	lsls	r5, r0, #25
 8004c76:	d5fb      	bpl.n	8004c70 <_printf_i+0xb8>
 8004c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	da03      	bge.n	8004c88 <_printf_i+0xd0>
 8004c80:	232d      	movs	r3, #45	@ 0x2d
 8004c82:	426d      	negs	r5, r5
 8004c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c88:	4858      	ldr	r0, [pc, #352]	@ (8004dec <_printf_i+0x234>)
 8004c8a:	230a      	movs	r3, #10
 8004c8c:	e011      	b.n	8004cb2 <_printf_i+0xfa>
 8004c8e:	6821      	ldr	r1, [r4, #0]
 8004c90:	6833      	ldr	r3, [r6, #0]
 8004c92:	0608      	lsls	r0, r1, #24
 8004c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c98:	d402      	bmi.n	8004ca0 <_printf_i+0xe8>
 8004c9a:	0649      	lsls	r1, r1, #25
 8004c9c:	bf48      	it	mi
 8004c9e:	b2ad      	uxthmi	r5, r5
 8004ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ca2:	4852      	ldr	r0, [pc, #328]	@ (8004dec <_printf_i+0x234>)
 8004ca4:	6033      	str	r3, [r6, #0]
 8004ca6:	bf14      	ite	ne
 8004ca8:	230a      	movne	r3, #10
 8004caa:	2308      	moveq	r3, #8
 8004cac:	2100      	movs	r1, #0
 8004cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cb2:	6866      	ldr	r6, [r4, #4]
 8004cb4:	60a6      	str	r6, [r4, #8]
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	db05      	blt.n	8004cc6 <_printf_i+0x10e>
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	432e      	orrs	r6, r5
 8004cbe:	f021 0104 	bic.w	r1, r1, #4
 8004cc2:	6021      	str	r1, [r4, #0]
 8004cc4:	d04b      	beq.n	8004d5e <_printf_i+0x1a6>
 8004cc6:	4616      	mov	r6, r2
 8004cc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ccc:	fb03 5711 	mls	r7, r3, r1, r5
 8004cd0:	5dc7      	ldrb	r7, [r0, r7]
 8004cd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cd6:	462f      	mov	r7, r5
 8004cd8:	42bb      	cmp	r3, r7
 8004cda:	460d      	mov	r5, r1
 8004cdc:	d9f4      	bls.n	8004cc8 <_printf_i+0x110>
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d10b      	bne.n	8004cfa <_printf_i+0x142>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	07df      	lsls	r7, r3, #31
 8004ce6:	d508      	bpl.n	8004cfa <_printf_i+0x142>
 8004ce8:	6923      	ldr	r3, [r4, #16]
 8004cea:	6861      	ldr	r1, [r4, #4]
 8004cec:	4299      	cmp	r1, r3
 8004cee:	bfde      	ittt	le
 8004cf0:	2330      	movle	r3, #48	@ 0x30
 8004cf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cfa:	1b92      	subs	r2, r2, r6
 8004cfc:	6122      	str	r2, [r4, #16]
 8004cfe:	f8cd a000 	str.w	sl, [sp]
 8004d02:	464b      	mov	r3, r9
 8004d04:	aa03      	add	r2, sp, #12
 8004d06:	4621      	mov	r1, r4
 8004d08:	4640      	mov	r0, r8
 8004d0a:	f7ff fee7 	bl	8004adc <_printf_common>
 8004d0e:	3001      	adds	r0, #1
 8004d10:	d14a      	bne.n	8004da8 <_printf_i+0x1f0>
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295
 8004d16:	b004      	add	sp, #16
 8004d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	f043 0320 	orr.w	r3, r3, #32
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	4832      	ldr	r0, [pc, #200]	@ (8004df0 <_printf_i+0x238>)
 8004d26:	2778      	movs	r7, #120	@ 0x78
 8004d28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	6831      	ldr	r1, [r6, #0]
 8004d30:	061f      	lsls	r7, r3, #24
 8004d32:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d36:	d402      	bmi.n	8004d3e <_printf_i+0x186>
 8004d38:	065f      	lsls	r7, r3, #25
 8004d3a:	bf48      	it	mi
 8004d3c:	b2ad      	uxthmi	r5, r5
 8004d3e:	6031      	str	r1, [r6, #0]
 8004d40:	07d9      	lsls	r1, r3, #31
 8004d42:	bf44      	itt	mi
 8004d44:	f043 0320 	orrmi.w	r3, r3, #32
 8004d48:	6023      	strmi	r3, [r4, #0]
 8004d4a:	b11d      	cbz	r5, 8004d54 <_printf_i+0x19c>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	e7ad      	b.n	8004cac <_printf_i+0xf4>
 8004d50:	4826      	ldr	r0, [pc, #152]	@ (8004dec <_printf_i+0x234>)
 8004d52:	e7e9      	b.n	8004d28 <_printf_i+0x170>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	f023 0320 	bic.w	r3, r3, #32
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	e7f6      	b.n	8004d4c <_printf_i+0x194>
 8004d5e:	4616      	mov	r6, r2
 8004d60:	e7bd      	b.n	8004cde <_printf_i+0x126>
 8004d62:	6833      	ldr	r3, [r6, #0]
 8004d64:	6825      	ldr	r5, [r4, #0]
 8004d66:	6961      	ldr	r1, [r4, #20]
 8004d68:	1d18      	adds	r0, r3, #4
 8004d6a:	6030      	str	r0, [r6, #0]
 8004d6c:	062e      	lsls	r6, r5, #24
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	d501      	bpl.n	8004d76 <_printf_i+0x1be>
 8004d72:	6019      	str	r1, [r3, #0]
 8004d74:	e002      	b.n	8004d7c <_printf_i+0x1c4>
 8004d76:	0668      	lsls	r0, r5, #25
 8004d78:	d5fb      	bpl.n	8004d72 <_printf_i+0x1ba>
 8004d7a:	8019      	strh	r1, [r3, #0]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	4616      	mov	r6, r2
 8004d82:	e7bc      	b.n	8004cfe <_printf_i+0x146>
 8004d84:	6833      	ldr	r3, [r6, #0]
 8004d86:	1d1a      	adds	r2, r3, #4
 8004d88:	6032      	str	r2, [r6, #0]
 8004d8a:	681e      	ldr	r6, [r3, #0]
 8004d8c:	6862      	ldr	r2, [r4, #4]
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4630      	mov	r0, r6
 8004d92:	f7fb fa25 	bl	80001e0 <memchr>
 8004d96:	b108      	cbz	r0, 8004d9c <_printf_i+0x1e4>
 8004d98:	1b80      	subs	r0, r0, r6
 8004d9a:	6060      	str	r0, [r4, #4]
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	6123      	str	r3, [r4, #16]
 8004da0:	2300      	movs	r3, #0
 8004da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da6:	e7aa      	b.n	8004cfe <_printf_i+0x146>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	4632      	mov	r2, r6
 8004dac:	4649      	mov	r1, r9
 8004dae:	4640      	mov	r0, r8
 8004db0:	47d0      	blx	sl
 8004db2:	3001      	adds	r0, #1
 8004db4:	d0ad      	beq.n	8004d12 <_printf_i+0x15a>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	079b      	lsls	r3, r3, #30
 8004dba:	d413      	bmi.n	8004de4 <_printf_i+0x22c>
 8004dbc:	68e0      	ldr	r0, [r4, #12]
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	4298      	cmp	r0, r3
 8004dc2:	bfb8      	it	lt
 8004dc4:	4618      	movlt	r0, r3
 8004dc6:	e7a6      	b.n	8004d16 <_printf_i+0x15e>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4632      	mov	r2, r6
 8004dcc:	4649      	mov	r1, r9
 8004dce:	4640      	mov	r0, r8
 8004dd0:	47d0      	blx	sl
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d09d      	beq.n	8004d12 <_printf_i+0x15a>
 8004dd6:	3501      	adds	r5, #1
 8004dd8:	68e3      	ldr	r3, [r4, #12]
 8004dda:	9903      	ldr	r1, [sp, #12]
 8004ddc:	1a5b      	subs	r3, r3, r1
 8004dde:	42ab      	cmp	r3, r5
 8004de0:	dcf2      	bgt.n	8004dc8 <_printf_i+0x210>
 8004de2:	e7eb      	b.n	8004dbc <_printf_i+0x204>
 8004de4:	2500      	movs	r5, #0
 8004de6:	f104 0619 	add.w	r6, r4, #25
 8004dea:	e7f5      	b.n	8004dd8 <_printf_i+0x220>
 8004dec:	080050e1 	.word	0x080050e1
 8004df0:	080050f2 	.word	0x080050f2

08004df4 <__sflush_r>:
 8004df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	0716      	lsls	r6, r2, #28
 8004dfe:	4605      	mov	r5, r0
 8004e00:	460c      	mov	r4, r1
 8004e02:	d454      	bmi.n	8004eae <__sflush_r+0xba>
 8004e04:	684b      	ldr	r3, [r1, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dc02      	bgt.n	8004e10 <__sflush_r+0x1c>
 8004e0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	dd48      	ble.n	8004ea2 <__sflush_r+0xae>
 8004e10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	d045      	beq.n	8004ea2 <__sflush_r+0xae>
 8004e16:	2300      	movs	r3, #0
 8004e18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e1c:	682f      	ldr	r7, [r5, #0]
 8004e1e:	6a21      	ldr	r1, [r4, #32]
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	d030      	beq.n	8004e86 <__sflush_r+0x92>
 8004e24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	0759      	lsls	r1, r3, #29
 8004e2a:	d505      	bpl.n	8004e38 <__sflush_r+0x44>
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e32:	b10b      	cbz	r3, 8004e38 <__sflush_r+0x44>
 8004e34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e3c:	6a21      	ldr	r1, [r4, #32]
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b0      	blx	r6
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	d106      	bne.n	8004e56 <__sflush_r+0x62>
 8004e48:	6829      	ldr	r1, [r5, #0]
 8004e4a:	291d      	cmp	r1, #29
 8004e4c:	d82b      	bhi.n	8004ea6 <__sflush_r+0xb2>
 8004e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef8 <__sflush_r+0x104>)
 8004e50:	40ca      	lsrs	r2, r1
 8004e52:	07d6      	lsls	r6, r2, #31
 8004e54:	d527      	bpl.n	8004ea6 <__sflush_r+0xb2>
 8004e56:	2200      	movs	r2, #0
 8004e58:	6062      	str	r2, [r4, #4]
 8004e5a:	04d9      	lsls	r1, r3, #19
 8004e5c:	6922      	ldr	r2, [r4, #16]
 8004e5e:	6022      	str	r2, [r4, #0]
 8004e60:	d504      	bpl.n	8004e6c <__sflush_r+0x78>
 8004e62:	1c42      	adds	r2, r0, #1
 8004e64:	d101      	bne.n	8004e6a <__sflush_r+0x76>
 8004e66:	682b      	ldr	r3, [r5, #0]
 8004e68:	b903      	cbnz	r3, 8004e6c <__sflush_r+0x78>
 8004e6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e6e:	602f      	str	r7, [r5, #0]
 8004e70:	b1b9      	cbz	r1, 8004ea2 <__sflush_r+0xae>
 8004e72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e76:	4299      	cmp	r1, r3
 8004e78:	d002      	beq.n	8004e80 <__sflush_r+0x8c>
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f7ff fbf4 	bl	8004668 <_free_r>
 8004e80:	2300      	movs	r3, #0
 8004e82:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e84:	e00d      	b.n	8004ea2 <__sflush_r+0xae>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b0      	blx	r6
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	1c50      	adds	r0, r2, #1
 8004e90:	d1c9      	bne.n	8004e26 <__sflush_r+0x32>
 8004e92:	682b      	ldr	r3, [r5, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0c6      	beq.n	8004e26 <__sflush_r+0x32>
 8004e98:	2b1d      	cmp	r3, #29
 8004e9a:	d001      	beq.n	8004ea0 <__sflush_r+0xac>
 8004e9c:	2b16      	cmp	r3, #22
 8004e9e:	d11e      	bne.n	8004ede <__sflush_r+0xea>
 8004ea0:	602f      	str	r7, [r5, #0]
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e022      	b.n	8004eec <__sflush_r+0xf8>
 8004ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eaa:	b21b      	sxth	r3, r3
 8004eac:	e01b      	b.n	8004ee6 <__sflush_r+0xf2>
 8004eae:	690f      	ldr	r7, [r1, #16]
 8004eb0:	2f00      	cmp	r7, #0
 8004eb2:	d0f6      	beq.n	8004ea2 <__sflush_r+0xae>
 8004eb4:	0793      	lsls	r3, r2, #30
 8004eb6:	680e      	ldr	r6, [r1, #0]
 8004eb8:	bf08      	it	eq
 8004eba:	694b      	ldreq	r3, [r1, #20]
 8004ebc:	600f      	str	r7, [r1, #0]
 8004ebe:	bf18      	it	ne
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	eba6 0807 	sub.w	r8, r6, r7
 8004ec6:	608b      	str	r3, [r1, #8]
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	dde9      	ble.n	8004ea2 <__sflush_r+0xae>
 8004ece:	6a21      	ldr	r1, [r4, #32]
 8004ed0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ed2:	4643      	mov	r3, r8
 8004ed4:	463a      	mov	r2, r7
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	47b0      	blx	r6
 8004eda:	2800      	cmp	r0, #0
 8004edc:	dc08      	bgt.n	8004ef0 <__sflush_r+0xfc>
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef0:	4407      	add	r7, r0
 8004ef2:	eba8 0800 	sub.w	r8, r8, r0
 8004ef6:	e7e7      	b.n	8004ec8 <__sflush_r+0xd4>
 8004ef8:	20400001 	.word	0x20400001

08004efc <_fflush_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	4605      	mov	r5, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b913      	cbnz	r3, 8004f0c <_fflush_r+0x10>
 8004f06:	2500      	movs	r5, #0
 8004f08:	4628      	mov	r0, r5
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	b118      	cbz	r0, 8004f16 <_fflush_r+0x1a>
 8004f0e:	6a03      	ldr	r3, [r0, #32]
 8004f10:	b90b      	cbnz	r3, 8004f16 <_fflush_r+0x1a>
 8004f12:	f7ff f9af 	bl	8004274 <__sinit>
 8004f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f3      	beq.n	8004f06 <_fflush_r+0xa>
 8004f1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f20:	07d0      	lsls	r0, r2, #31
 8004f22:	d404      	bmi.n	8004f2e <_fflush_r+0x32>
 8004f24:	0599      	lsls	r1, r3, #22
 8004f26:	d402      	bmi.n	8004f2e <_fflush_r+0x32>
 8004f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f2a:	f7ff fb9a 	bl	8004662 <__retarget_lock_acquire_recursive>
 8004f2e:	4628      	mov	r0, r5
 8004f30:	4621      	mov	r1, r4
 8004f32:	f7ff ff5f 	bl	8004df4 <__sflush_r>
 8004f36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f38:	07da      	lsls	r2, r3, #31
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	d4e4      	bmi.n	8004f08 <_fflush_r+0xc>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	059b      	lsls	r3, r3, #22
 8004f42:	d4e1      	bmi.n	8004f08 <_fflush_r+0xc>
 8004f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f46:	f7ff fb8d 	bl	8004664 <__retarget_lock_release_recursive>
 8004f4a:	e7dd      	b.n	8004f08 <_fflush_r+0xc>

08004f4c <__swhatbuf_r>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	460c      	mov	r4, r1
 8004f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f54:	2900      	cmp	r1, #0
 8004f56:	b096      	sub	sp, #88	@ 0x58
 8004f58:	4615      	mov	r5, r2
 8004f5a:	461e      	mov	r6, r3
 8004f5c:	da0d      	bge.n	8004f7a <__swhatbuf_r+0x2e>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f64:	f04f 0100 	mov.w	r1, #0
 8004f68:	bf14      	ite	ne
 8004f6a:	2340      	movne	r3, #64	@ 0x40
 8004f6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f70:	2000      	movs	r0, #0
 8004f72:	6031      	str	r1, [r6, #0]
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	b016      	add	sp, #88	@ 0x58
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	466a      	mov	r2, sp
 8004f7c:	f000 f848 	bl	8005010 <_fstat_r>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	dbec      	blt.n	8004f5e <__swhatbuf_r+0x12>
 8004f84:	9901      	ldr	r1, [sp, #4]
 8004f86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f8e:	4259      	negs	r1, r3
 8004f90:	4159      	adcs	r1, r3
 8004f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f96:	e7eb      	b.n	8004f70 <__swhatbuf_r+0x24>

08004f98 <__smakebuf_r>:
 8004f98:	898b      	ldrh	r3, [r1, #12]
 8004f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f9c:	079d      	lsls	r5, r3, #30
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	d507      	bpl.n	8004fb4 <__smakebuf_r+0x1c>
 8004fa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	2301      	movs	r3, #1
 8004fae:	6163      	str	r3, [r4, #20]
 8004fb0:	b003      	add	sp, #12
 8004fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb4:	ab01      	add	r3, sp, #4
 8004fb6:	466a      	mov	r2, sp
 8004fb8:	f7ff ffc8 	bl	8004f4c <__swhatbuf_r>
 8004fbc:	9f00      	ldr	r7, [sp, #0]
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f7ff fbbc 	bl	8004740 <_malloc_r>
 8004fc8:	b948      	cbnz	r0, 8004fde <__smakebuf_r+0x46>
 8004fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fce:	059a      	lsls	r2, r3, #22
 8004fd0:	d4ee      	bmi.n	8004fb0 <__smakebuf_r+0x18>
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	f043 0302 	orr.w	r3, r3, #2
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	e7e2      	b.n	8004fa4 <__smakebuf_r+0xc>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	6020      	str	r0, [r4, #0]
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	9b01      	ldr	r3, [sp, #4]
 8004fea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fee:	b15b      	cbz	r3, 8005008 <__smakebuf_r+0x70>
 8004ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f000 f81d 	bl	8005034 <_isatty_r>
 8004ffa:	b128      	cbz	r0, 8005008 <__smakebuf_r+0x70>
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	431d      	orrs	r5, r3
 800500c:	81a5      	strh	r5, [r4, #12]
 800500e:	e7cf      	b.n	8004fb0 <__smakebuf_r+0x18>

08005010 <_fstat_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4d07      	ldr	r5, [pc, #28]	@ (8005030 <_fstat_r+0x20>)
 8005014:	2300      	movs	r3, #0
 8005016:	4604      	mov	r4, r0
 8005018:	4608      	mov	r0, r1
 800501a:	4611      	mov	r1, r2
 800501c:	602b      	str	r3, [r5, #0]
 800501e:	f7fc f806 	bl	800102e <_fstat>
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	d102      	bne.n	800502c <_fstat_r+0x1c>
 8005026:	682b      	ldr	r3, [r5, #0]
 8005028:	b103      	cbz	r3, 800502c <_fstat_r+0x1c>
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	bd38      	pop	{r3, r4, r5, pc}
 800502e:	bf00      	nop
 8005030:	200002c4 	.word	0x200002c4

08005034 <_isatty_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d06      	ldr	r5, [pc, #24]	@ (8005050 <_isatty_r+0x1c>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fc f805 	bl	800104e <_isatty>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_isatty_r+0x1a>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_isatty_r+0x1a>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	200002c4 	.word	0x200002c4

08005054 <_sbrk_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4d06      	ldr	r5, [pc, #24]	@ (8005070 <_sbrk_r+0x1c>)
 8005058:	2300      	movs	r3, #0
 800505a:	4604      	mov	r4, r0
 800505c:	4608      	mov	r0, r1
 800505e:	602b      	str	r3, [r5, #0]
 8005060:	f7fc f80e 	bl	8001080 <_sbrk>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_sbrk_r+0x1a>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	b103      	cbz	r3, 800506e <_sbrk_r+0x1a>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	200002c4 	.word	0x200002c4

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
